//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 5 files.
  struct file {
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")
    /// Resource file `html`.
    static let html = Rswift.FileResource(bundle: R.hostingBundle, name: "html", pathExtension: "")
    /// Resource file `vrf_green.png`.
    static let vrf_greenPng = Rswift.FileResource(bundle: R.hostingBundle, name: "vrf_green", pathExtension: "png")
    /// Resource file `vrf_grey.png`.
    static let vrf_greyPng = Rswift.FileResource(bundle: R.hostingBundle, name: "vrf_grey", pathExtension: "png")
    /// Resource file `vrf_orange.png`.
    static let vrf_orangePng = Rswift.FileResource(bundle: R.hostingBundle, name: "vrf_orange", pathExtension: "png")
    
    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "html", withExtension: "")`
    static func html(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.html
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "vrf_green", withExtension: "png")`
    static func vrf_greenPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.vrf_greenPng
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "vrf_grey", withExtension: "png")`
    static func vrf_greyPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.vrf_greyPng
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "vrf_orange", withExtension: "png")`
    static func vrf_orangePng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.vrf_orangePng
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 77 images.
  struct image {
    /// Image `@add_icon`.
    static let add_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "@add_icon")
    /// Image `@arrow_down_blue_icon`.
    static let arrow_down_blue_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "@arrow_down_blue_icon")
    /// Image `@arrow_up_grey_icon`.
    static let arrow_up_grey_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "@arrow_up_grey_icon")
    /// Image `@delete_field_icon`.
    static let delete_field_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "@delete_field_icon")
    /// Image `@ic_accept`.
    static let ic_accept = Rswift.ImageResource(bundle: R.hostingBundle, name: "@ic_accept")
    /// Image `@ic_edit`.
    static let ic_edit = Rswift.ImageResource(bundle: R.hostingBundle, name: "@ic_edit")
    /// Image `@logout`.
    static let logout = Rswift.ImageResource(bundle: R.hostingBundle, name: "@logout")
    /// Image `@photo_field_icon`.
    static let photo_field_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "@photo_field_icon")
    /// Image `@startScreenBackground`.
    static let startScreenBackground = Rswift.ImageResource(bundle: R.hostingBundle, name: "@startScreenBackground")
    /// Image `@startScreenLogo`.
    static let startScreenLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "@startScreenLogo")
    /// Image `@text_field_icon`.
    static let text_field_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "@text_field_icon")
    /// Image `@video_field_icon`.
    static let video_field_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "@video_field_icon")
    /// Image `AText.Icon`.
    static let aTextIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "AText.Icon")
    /// Image `Check.Icon`.
    static let checkIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "Check.Icon")
    /// Image `Comb2`.
    static let comb2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Comb2")
    /// Image `Comb`.
    static let comb = Rswift.ImageResource(bundle: R.hostingBundle, name: "Comb")
    /// Image `Combined Shape 2`.
    static let combinedShape2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Combined Shape 2")
    /// Image `Combined ShapeSideMenu`.
    static let combinedShapeSideMenu = Rswift.ImageResource(bundle: R.hostingBundle, name: "Combined ShapeSideMenu")
    /// Image `Combined Shape`.
    static let combinedShape = Rswift.ImageResource(bundle: R.hostingBundle, name: "Combined Shape")
    /// Image `CreateTaskBackground`.
    static let createTaskBackground = Rswift.ImageResource(bundle: R.hostingBundle, name: "CreateTaskBackground")
    /// Image `Email.Icon`.
    static let emailIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "Email.Icon")
    /// Image `Filter.Icon`.
    static let filterIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "Filter.Icon")
    /// Image `LaunchImage`.
    static let launchImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "LaunchImage")
    /// Image `Nav Shape`.
    static let navShape = Rswift.ImageResource(bundle: R.hostingBundle, name: "Nav Shape")
    /// Image `Oval`.
    static let oval = Rswift.ImageResource(bundle: R.hostingBundle, name: "Oval")
    /// Image `Photo.Icon`.
    static let photoIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "Photo.Icon")
    /// Image `Video.Icon`.
    static let videoIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "Video.Icon")
    /// Image `appstore_icon`.
    static let appstore_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "appstore_icon")
    /// Image `arrow_down_1`.
    static let arrow_down_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrow_down_1")
    /// Image `arrow_down_grey_icon`.
    static let arrow_down_grey_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrow_down_grey_icon")
    /// Image `arrow_down_settings_icon`.
    static let arrow_down_settings_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrow_down_settings_icon")
    /// Image `arrow_right_3`.
    static let arrow_right_3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrow_right_3")
    /// Image `back_color`.
    static let back_color = Rswift.ImageResource(bundle: R.hostingBundle, name: "back_color")
    /// Image `back_icon_black`.
    static let back_icon_black = Rswift.ImageResource(bundle: R.hostingBundle, name: "back_icon_black")
    /// Image `back_icon_white`.
    static let back_icon_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "back_icon_white")
    /// Image `black_marker`.
    static let black_marker = Rswift.ImageResource(bundle: R.hostingBundle, name: "black_marker")
    /// Image `chat.icon`.
    static let chatIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "chat.icon")
    /// Image `check.Icon.Active`.
    static let checkIconActive = Rswift.ImageResource(bundle: R.hostingBundle, name: "check.Icon.Active")
    /// Image `check.Icon.NoActive`.
    static let checkIconNoActive = Rswift.ImageResource(bundle: R.hostingBundle, name: "check.Icon.NoActive")
    /// Image `checkOff`.
    static let checkOff = Rswift.ImageResource(bundle: R.hostingBundle, name: "checkOff")
    /// Image `checkOn`.
    static let checkOn = Rswift.ImageResource(bundle: R.hostingBundle, name: "checkOn")
    /// Image `checkmark`.
    static let checkmark = Rswift.ImageResource(bundle: R.hostingBundle, name: "checkmark")
    /// Image `color_1`.
    static let color_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "color_1")
    /// Image `darkMenuIcon`.
    static let darkMenuIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "darkMenuIcon")
    /// Image `fb_icon`.
    static let fb_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "fb_icon")
    /// Image `googleplay_icon`.
    static let googleplay_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "googleplay_icon")
    /// Image `greenMenuIcon`.
    static let greenMenuIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "greenMenuIcon")
    /// Image `ic_star1`.
    static let ic_star1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_star1")
    /// Image `ic_star2`.
    static let ic_star2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_star2")
    /// Image `ic_star3`.
    static let ic_star3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_star3")
    /// Image `ic_star4`.
    static let ic_star4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_star4")
    /// Image `ic_star5`.
    static let ic_star5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_star5")
    /// Image `ic_star6`.
    static let ic_star6 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_star6")
    /// Image `icon`.
    static let icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon")
    /// Image `icons8-facebook`.
    static let icons8Facebook = Rswift.ImageResource(bundle: R.hostingBundle, name: "icons8-facebook")
    /// Image `icons8-instagram_new`.
    static let icons8Instagram_new = Rswift.ImageResource(bundle: R.hostingBundle, name: "icons8-instagram_new")
    /// Image `icons8-twitter_filled`.
    static let icons8Twitter_filled = Rswift.ImageResource(bundle: R.hostingBundle, name: "icons8-twitter_filled")
    /// Image `location_icon`.
    static let location_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "location_icon")
    /// Image `login_fon`.
    static let login_fon = Rswift.ImageResource(bundle: R.hostingBundle, name: "login_fon")
    /// Image `loginbackground`.
    static let loginbackground = Rswift.ImageResource(bundle: R.hostingBundle, name: "loginbackground")
    /// Image `logo_white`.
    static let logo_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo_white")
    /// Image `logo`.
    static let logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo")
    /// Image `map_marker_icon`.
    static let map_marker_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "map_marker_icon")
    /// Image `markerIcon`.
    static let markerIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "markerIcon")
    /// Image `maske`.
    static let maske = Rswift.ImageResource(bundle: R.hostingBundle, name: "maske")
    /// Image `qr_border`.
    static let qr_border = Rswift.ImageResource(bundle: R.hostingBundle, name: "qr_border")
    /// Image `qr_icone`.
    static let qr_icone = Rswift.ImageResource(bundle: R.hostingBundle, name: "qr_icone")
    /// Image `red_icon`.
    static let red_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "red_icon")
    /// Image `splashBackground`.
    static let splashBackground = Rswift.ImageResource(bundle: R.hostingBundle, name: "splashBackground")
    /// Image `trash_icon`.
    static let trash_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "trash_icon")
    /// Image `twitter_icon`.
    static let twitter_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "twitter_icon")
    /// Image `verifier_ava`.
    static let verifier_ava = Rswift.ImageResource(bundle: R.hostingBundle, name: "verifier_ava")
    /// Image `vrf_green`.
    static let vrf_green = Rswift.ImageResource(bundle: R.hostingBundle, name: "vrf_green")
    /// Image `vrf_grey`.
    static let vrf_grey = Rswift.ImageResource(bundle: R.hostingBundle, name: "vrf_grey")
    /// Image `vrf_orange`.
    static let vrf_orange = Rswift.ImageResource(bundle: R.hostingBundle, name: "vrf_orange")
    /// Image `whiteMenuIcon`.
    static let whiteMenuIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "whiteMenuIcon")
    /// Image `white_marker`.
    static let white_marker = Rswift.ImageResource(bundle: R.hostingBundle, name: "white_marker")
    
    /// `UIImage(named: "@add_icon", bundle: ..., traitCollection: ...)`
    static func add_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.add_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "@arrow_down_blue_icon", bundle: ..., traitCollection: ...)`
    static func arrow_down_blue_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrow_down_blue_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "@arrow_up_grey_icon", bundle: ..., traitCollection: ...)`
    static func arrow_up_grey_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrow_up_grey_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "@delete_field_icon", bundle: ..., traitCollection: ...)`
    static func delete_field_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.delete_field_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "@ic_accept", bundle: ..., traitCollection: ...)`
    static func ic_accept(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_accept, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "@ic_edit", bundle: ..., traitCollection: ...)`
    static func ic_edit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_edit, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "@logout", bundle: ..., traitCollection: ...)`
    static func logout(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logout, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "@photo_field_icon", bundle: ..., traitCollection: ...)`
    static func photo_field_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.photo_field_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "@startScreenBackground", bundle: ..., traitCollection: ...)`
    static func startScreenBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.startScreenBackground, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "@startScreenLogo", bundle: ..., traitCollection: ...)`
    static func startScreenLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.startScreenLogo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "@text_field_icon", bundle: ..., traitCollection: ...)`
    static func text_field_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.text_field_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "@video_field_icon", bundle: ..., traitCollection: ...)`
    static func video_field_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.video_field_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "AText.Icon", bundle: ..., traitCollection: ...)`
    static func aTextIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.aTextIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Check.Icon", bundle: ..., traitCollection: ...)`
    static func checkIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checkIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Comb", bundle: ..., traitCollection: ...)`
    static func comb(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.comb, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Comb2", bundle: ..., traitCollection: ...)`
    static func comb2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.comb2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Combined Shape 2", bundle: ..., traitCollection: ...)`
    static func combinedShape2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.combinedShape2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Combined Shape", bundle: ..., traitCollection: ...)`
    static func combinedShape(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.combinedShape, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Combined ShapeSideMenu", bundle: ..., traitCollection: ...)`
    static func combinedShapeSideMenu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.combinedShapeSideMenu, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "CreateTaskBackground", bundle: ..., traitCollection: ...)`
    static func createTaskBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.createTaskBackground, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Email.Icon", bundle: ..., traitCollection: ...)`
    static func emailIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.emailIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Filter.Icon", bundle: ..., traitCollection: ...)`
    static func filterIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.filterIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "LaunchImage", bundle: ..., traitCollection: ...)`
    static func launchImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.launchImage, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Nav Shape", bundle: ..., traitCollection: ...)`
    static func navShape(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.navShape, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Oval", bundle: ..., traitCollection: ...)`
    static func oval(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.oval, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Photo.Icon", bundle: ..., traitCollection: ...)`
    static func photoIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.photoIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Video.Icon", bundle: ..., traitCollection: ...)`
    static func videoIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.videoIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "appstore_icon", bundle: ..., traitCollection: ...)`
    static func appstore_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.appstore_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "arrow_down_1", bundle: ..., traitCollection: ...)`
    static func arrow_down_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrow_down_1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "arrow_down_grey_icon", bundle: ..., traitCollection: ...)`
    static func arrow_down_grey_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrow_down_grey_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "arrow_down_settings_icon", bundle: ..., traitCollection: ...)`
    static func arrow_down_settings_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrow_down_settings_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "arrow_right_3", bundle: ..., traitCollection: ...)`
    static func arrow_right_3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrow_right_3, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "back_color", bundle: ..., traitCollection: ...)`
    static func back_color(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.back_color, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "back_icon_black", bundle: ..., traitCollection: ...)`
    static func back_icon_black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.back_icon_black, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "back_icon_white", bundle: ..., traitCollection: ...)`
    static func back_icon_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.back_icon_white, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "black_marker", bundle: ..., traitCollection: ...)`
    static func black_marker(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.black_marker, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "chat.icon", bundle: ..., traitCollection: ...)`
    static func chatIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chatIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "check.Icon.Active", bundle: ..., traitCollection: ...)`
    static func checkIconActive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checkIconActive, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "check.Icon.NoActive", bundle: ..., traitCollection: ...)`
    static func checkIconNoActive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checkIconNoActive, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "checkOff", bundle: ..., traitCollection: ...)`
    static func checkOff(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checkOff, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "checkOn", bundle: ..., traitCollection: ...)`
    static func checkOn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checkOn, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "checkmark", bundle: ..., traitCollection: ...)`
    static func checkmark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checkmark, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "color_1", bundle: ..., traitCollection: ...)`
    static func color_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.color_1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "darkMenuIcon", bundle: ..., traitCollection: ...)`
    static func darkMenuIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.darkMenuIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "fb_icon", bundle: ..., traitCollection: ...)`
    static func fb_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fb_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "googleplay_icon", bundle: ..., traitCollection: ...)`
    static func googleplay_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.googleplay_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "greenMenuIcon", bundle: ..., traitCollection: ...)`
    static func greenMenuIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.greenMenuIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_star1", bundle: ..., traitCollection: ...)`
    static func ic_star1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_star1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_star2", bundle: ..., traitCollection: ...)`
    static func ic_star2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_star2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_star3", bundle: ..., traitCollection: ...)`
    static func ic_star3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_star3, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_star4", bundle: ..., traitCollection: ...)`
    static func ic_star4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_star4, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_star5", bundle: ..., traitCollection: ...)`
    static func ic_star5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_star5, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_star6", bundle: ..., traitCollection: ...)`
    static func ic_star6(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_star6, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon", bundle: ..., traitCollection: ...)`
    static func icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icons8-facebook", bundle: ..., traitCollection: ...)`
    static func icons8Facebook(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icons8Facebook, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icons8-instagram_new", bundle: ..., traitCollection: ...)`
    static func icons8Instagram_new(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icons8Instagram_new, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icons8-twitter_filled", bundle: ..., traitCollection: ...)`
    static func icons8Twitter_filled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icons8Twitter_filled, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "location_icon", bundle: ..., traitCollection: ...)`
    static func location_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.location_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "login_fon", bundle: ..., traitCollection: ...)`
    static func login_fon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.login_fon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "loginbackground", bundle: ..., traitCollection: ...)`
    static func loginbackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.loginbackground, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "logo", bundle: ..., traitCollection: ...)`
    static func logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "logo_white", bundle: ..., traitCollection: ...)`
    static func logo_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo_white, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "map_marker_icon", bundle: ..., traitCollection: ...)`
    static func map_marker_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.map_marker_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "markerIcon", bundle: ..., traitCollection: ...)`
    static func markerIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.markerIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "maske", bundle: ..., traitCollection: ...)`
    static func maske(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.maske, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "qr_border", bundle: ..., traitCollection: ...)`
    static func qr_border(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qr_border, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "qr_icone", bundle: ..., traitCollection: ...)`
    static func qr_icone(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qr_icone, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "red_icon", bundle: ..., traitCollection: ...)`
    static func red_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.red_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "splashBackground", bundle: ..., traitCollection: ...)`
    static func splashBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.splashBackground, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "trash_icon", bundle: ..., traitCollection: ...)`
    static func trash_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.trash_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "twitter_icon", bundle: ..., traitCollection: ...)`
    static func twitter_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.twitter_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "verifier_ava", bundle: ..., traitCollection: ...)`
    static func verifier_ava(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.verifier_ava, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "vrf_green", bundle: ..., traitCollection: ...)`
    static func vrf_green(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.vrf_green, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "vrf_grey", bundle: ..., traitCollection: ...)`
    static func vrf_grey(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.vrf_grey, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "vrf_orange", bundle: ..., traitCollection: ...)`
    static func vrf_orange(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.vrf_orange, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "whiteMenuIcon", bundle: ..., traitCollection: ...)`
    static func whiteMenuIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.whiteMenuIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "white_marker", bundle: ..., traitCollection: ...)`
    static func white_marker(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.white_marker, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 26 nibs.
  struct nib {
    /// Nib `AddressProfileCollectionViewCell`.
    static let addressProfileCollectionViewCell = _R.nib._AddressProfileCollectionViewCell()
    /// Nib `CreateTaskChooseFieldTableViewCell`.
    static let createTaskChooseFieldTableViewCell = _R.nib._CreateTaskChooseFieldTableViewCell()
    /// Nib `EmailCollectionViewCell`.
    static let emailCollectionViewCell = _R.nib._EmailCollectionViewCell()
    /// Nib `FieldOrderPhotoTableViewCell`.
    static let fieldOrderPhotoTableViewCell = _R.nib._FieldOrderPhotoTableViewCell()
    /// Nib `FieldOrderTextTableViewCell`.
    static let fieldOrderTextTableViewCell = _R.nib._FieldOrderTextTableViewCell()
    /// Nib `FieldOrderVideoTableViewCell`.
    static let fieldOrderVideoTableViewCell = _R.nib._FieldOrderVideoTableViewCell()
    /// Nib `FilterContentTableViewCell`.
    static let filterContentTableViewCell = _R.nib._FilterContentTableViewCell()
    /// Nib `FilterMapTableViewCell`.
    static let filterMapTableViewCell = _R.nib._FilterMapTableViewCell()
    /// Nib `FilterRadiusTableViewCell`.
    static let filterRadiusTableViewCell = _R.nib._FilterRadiusTableViewCell()
    /// Nib `FilterRangeOfOrderExecutionViewCell`.
    static let filterRangeOfOrderExecutionViewCell = _R.nib._FilterRangeOfOrderExecutionViewCell()
    /// Nib `FormulateOrderFieldsTableViewCell`.
    static let formulateOrderFieldsTableViewCell = _R.nib._FormulateOrderFieldsTableViewCell()
    /// Nib `IdDataCollectionViewCell`.
    static let idDataCollectionViewCell = _R.nib._IdDataCollectionViewCell()
    /// Nib `OrderCheckTableViewCell`.
    static let orderCheckTableViewCell = _R.nib._OrderCheckTableViewCell()
    /// Nib `OrderDateTableViewCell`.
    static let orderDateTableViewCell = _R.nib._OrderDateTableViewCell()
    /// Nib `OrderDescriptionTableViewCell`.
    static let orderDescriptionTableViewCell = _R.nib._OrderDescriptionTableViewCell()
    /// Nib `OrderFieldsTableViewCell`.
    static let orderFieldsTableViewCell = _R.nib._OrderFieldsTableViewCell()
    /// Nib `OrderInfoTableViewCell`.
    static let orderInfoTableViewCell = _R.nib._OrderInfoTableViewCell()
    /// Nib `OrderMapTableViewCell`.
    static let orderMapTableViewCell = _R.nib._OrderMapTableViewCell()
    /// Nib `OrderMarkTableViewCell`.
    static let orderMarkTableViewCell = _R.nib._OrderMarkTableViewCell()
    /// Nib `OrderTextTableViewCell`.
    static let orderTextTableViewCell = _R.nib._OrderTextTableViewCell()
    /// Nib `PersonalProfileCollectionViewCell`.
    static let personalProfileCollectionViewCell = _R.nib._PersonalProfileCollectionViewCell()
    /// Nib `PhotoCollectionViewCell`.
    static let photoCollectionViewCell = _R.nib._PhotoCollectionViewCell()
    /// Nib `PreviewPhotoTableViewCell`.
    static let previewPhotoTableViewCell = _R.nib._PreviewPhotoTableViewCell()
    /// Nib `PreviewTextTableViewCell`.
    static let previewTextTableViewCell = _R.nib._PreviewTextTableViewCell()
    /// Nib `PreviewVideoTableViewCell`.
    static let previewVideoTableViewCell = _R.nib._PreviewVideoTableViewCell()
    /// Nib `VerifyCollectionViewCell`.
    static let verifyCollectionViewCell = _R.nib._VerifyCollectionViewCell()
    
    /// `UINib(name: "AddressProfileCollectionViewCell", in: bundle)`
    static func addressProfileCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.addressProfileCollectionViewCell)
    }
    
    /// `UINib(name: "CreateTaskChooseFieldTableViewCell", in: bundle)`
    static func createTaskChooseFieldTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.createTaskChooseFieldTableViewCell)
    }
    
    /// `UINib(name: "EmailCollectionViewCell", in: bundle)`
    static func emailCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.emailCollectionViewCell)
    }
    
    /// `UINib(name: "FieldOrderPhotoTableViewCell", in: bundle)`
    static func fieldOrderPhotoTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.fieldOrderPhotoTableViewCell)
    }
    
    /// `UINib(name: "FieldOrderTextTableViewCell", in: bundle)`
    static func fieldOrderTextTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.fieldOrderTextTableViewCell)
    }
    
    /// `UINib(name: "FieldOrderVideoTableViewCell", in: bundle)`
    static func fieldOrderVideoTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.fieldOrderVideoTableViewCell)
    }
    
    /// `UINib(name: "FilterContentTableViewCell", in: bundle)`
    static func filterContentTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.filterContentTableViewCell)
    }
    
    /// `UINib(name: "FilterMapTableViewCell", in: bundle)`
    static func filterMapTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.filterMapTableViewCell)
    }
    
    /// `UINib(name: "FilterRadiusTableViewCell", in: bundle)`
    static func filterRadiusTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.filterRadiusTableViewCell)
    }
    
    /// `UINib(name: "FilterRangeOfOrderExecutionViewCell", in: bundle)`
    static func filterRangeOfOrderExecutionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.filterRangeOfOrderExecutionViewCell)
    }
    
    /// `UINib(name: "FormulateOrderFieldsTableViewCell", in: bundle)`
    static func formulateOrderFieldsTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.formulateOrderFieldsTableViewCell)
    }
    
    /// `UINib(name: "IdDataCollectionViewCell", in: bundle)`
    static func idDataCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.idDataCollectionViewCell)
    }
    
    /// `UINib(name: "OrderCheckTableViewCell", in: bundle)`
    static func orderCheckTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.orderCheckTableViewCell)
    }
    
    /// `UINib(name: "OrderDateTableViewCell", in: bundle)`
    static func orderDateTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.orderDateTableViewCell)
    }
    
    /// `UINib(name: "OrderDescriptionTableViewCell", in: bundle)`
    static func orderDescriptionTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.orderDescriptionTableViewCell)
    }
    
    /// `UINib(name: "OrderFieldsTableViewCell", in: bundle)`
    static func orderFieldsTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.orderFieldsTableViewCell)
    }
    
    /// `UINib(name: "OrderInfoTableViewCell", in: bundle)`
    static func orderInfoTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.orderInfoTableViewCell)
    }
    
    /// `UINib(name: "OrderMapTableViewCell", in: bundle)`
    static func orderMapTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.orderMapTableViewCell)
    }
    
    /// `UINib(name: "OrderMarkTableViewCell", in: bundle)`
    static func orderMarkTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.orderMarkTableViewCell)
    }
    
    /// `UINib(name: "OrderTextTableViewCell", in: bundle)`
    static func orderTextTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.orderTextTableViewCell)
    }
    
    /// `UINib(name: "PersonalProfileCollectionViewCell", in: bundle)`
    static func personalProfileCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.personalProfileCollectionViewCell)
    }
    
    /// `UINib(name: "PhotoCollectionViewCell", in: bundle)`
    static func photoCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.photoCollectionViewCell)
    }
    
    /// `UINib(name: "PreviewPhotoTableViewCell", in: bundle)`
    static func previewPhotoTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.previewPhotoTableViewCell)
    }
    
    /// `UINib(name: "PreviewTextTableViewCell", in: bundle)`
    static func previewTextTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.previewTextTableViewCell)
    }
    
    /// `UINib(name: "PreviewVideoTableViewCell", in: bundle)`
    static func previewVideoTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.previewVideoTableViewCell)
    }
    
    /// `UINib(name: "VerifyCollectionViewCell", in: bundle)`
    static func verifyCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.verifyCollectionViewCell)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 37 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `AddNewPhotoCell`.
    static let addNewPhotoCell: Rswift.ReuseIdentifier<AddNewPhotoCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "AddNewPhotoCell")
    /// Reuse identifier `AddressCell`.
    static let addressCell: Rswift.ReuseIdentifier<AddressProfileCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "AddressCell")
    /// Reuse identifier `Cell`.
    static let cell: Rswift.ReuseIdentifier<UIKit.UIView> = Rswift.ReuseIdentifier(identifier: "Cell")
    /// Reuse identifier `CheckTableViewCell`.
    static let checkTableViewCell: Rswift.ReuseIdentifier<CheckTableViewCell> = Rswift.ReuseIdentifier(identifier: "CheckTableViewCell")
    /// Reuse identifier `CreateTaskChooseFieldTableViewCell`.
    static let createTaskChooseFieldTableViewCell: Rswift.ReuseIdentifier<CreateTaskChooseFieldTableViewCell> = Rswift.ReuseIdentifier(identifier: "CreateTaskChooseFieldTableViewCell")
    /// Reuse identifier `DashboardCell`.
    static let dashboardCell: Rswift.ReuseIdentifier<DashboardTableViewCell> = Rswift.ReuseIdentifier(identifier: "DashboardCell")
    /// Reuse identifier `EmailCell`.
    static let emailCell: Rswift.ReuseIdentifier<EmailCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "EmailCell")
    /// Reuse identifier `FieldOrderPhotoTableViewCell`.
    static let fieldOrderPhotoTableViewCell: Rswift.ReuseIdentifier<FieldOrderPhotoTableViewCell> = Rswift.ReuseIdentifier(identifier: "FieldOrderPhotoTableViewCell")
    /// Reuse identifier `FieldOrderTextTableViewCell`.
    static let fieldOrderTextTableViewCell: Rswift.ReuseIdentifier<FieldOrderTextTableViewCell> = Rswift.ReuseIdentifier(identifier: "FieldOrderTextTableViewCell")
    /// Reuse identifier `FieldOrderVideoTableViewCell`.
    static let fieldOrderVideoTableViewCell: Rswift.ReuseIdentifier<FieldOrderVideoTableViewCell> = Rswift.ReuseIdentifier(identifier: "FieldOrderVideoTableViewCell")
    /// Reuse identifier `FieldTableViewCell`.
    static let fieldTableViewCell: Rswift.ReuseIdentifier<FieldTableViewCell> = Rswift.ReuseIdentifier(identifier: "FieldTableViewCell")
    /// Reuse identifier `FilterContentTableViewCell`.
    static let filterContentTableViewCell: Rswift.ReuseIdentifier<FilterContentTableViewCell> = Rswift.ReuseIdentifier(identifier: "FilterContentTableViewCell")
    /// Reuse identifier `FilterHeaderCell`.
    static let filterHeaderCell: Rswift.ReuseIdentifier<FilterHeaderTableViewCell> = Rswift.ReuseIdentifier(identifier: "FilterHeaderCell")
    /// Reuse identifier `FilterMapTableViewCell`.
    static let filterMapTableViewCell: Rswift.ReuseIdentifier<FilterMapTableViewCell> = Rswift.ReuseIdentifier(identifier: "FilterMapTableViewCell")
    /// Reuse identifier `FilterPlaceCell`.
    static let filterPlaceCell: Rswift.ReuseIdentifier<FilterPlaceTableViewCell> = Rswift.ReuseIdentifier(identifier: "FilterPlaceCell")
    /// Reuse identifier `FilterRadiusTableViewCell`.
    static let filterRadiusTableViewCell: Rswift.ReuseIdentifier<FilterRadiusTableViewCell> = Rswift.ReuseIdentifier(identifier: "FilterRadiusTableViewCell")
    /// Reuse identifier `FilterRangeOfOrderExecutionViewCell`.
    static let filterRangeOfOrderExecutionViewCell: Rswift.ReuseIdentifier<FilterRangeOfOrderExecutionViewCell> = Rswift.ReuseIdentifier(identifier: "FilterRangeOfOrderExecutionViewCell")
    /// Reuse identifier `FormulateOrderFieldsTableViewCell`.
    static let formulateOrderFieldsTableViewCell: Rswift.ReuseIdentifier<FormulateOrderFieldsTableViewCell> = Rswift.ReuseIdentifier(identifier: "FormulateOrderFieldsTableViewCell")
    /// Reuse identifier `IdDataCell`.
    static let idDataCell: Rswift.ReuseIdentifier<IdDataCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "IdDataCell")
    /// Reuse identifier `OrderCheckTableViewCell`.
    static let orderCheckTableViewCell: Rswift.ReuseIdentifier<OrderCheckTableViewCell> = Rswift.ReuseIdentifier(identifier: "OrderCheckTableViewCell")
    /// Reuse identifier `OrderDateTableViewCell`.
    static let orderDateTableViewCell: Rswift.ReuseIdentifier<OrderDateTableViewCell> = Rswift.ReuseIdentifier(identifier: "OrderDateTableViewCell")
    /// Reuse identifier `OrderDescriptionTableViewCell`.
    static let orderDescriptionTableViewCell: Rswift.ReuseIdentifier<OrderDescriptionTableViewCell> = Rswift.ReuseIdentifier(identifier: "OrderDescriptionTableViewCell")
    /// Reuse identifier `OrderFieldsTableViewCell`.
    static let orderFieldsTableViewCell: Rswift.ReuseIdentifier<OrderFieldsTableViewCell> = Rswift.ReuseIdentifier(identifier: "OrderFieldsTableViewCell")
    /// Reuse identifier `OrderInfoTableViewCell`.
    static let orderInfoTableViewCell: Rswift.ReuseIdentifier<OrderInfoTableViewCell> = Rswift.ReuseIdentifier(identifier: "OrderInfoTableViewCell")
    /// Reuse identifier `OrderMapTableViewCell`.
    static let orderMapTableViewCell: Rswift.ReuseIdentifier<OrderMapTableViewCell> = Rswift.ReuseIdentifier(identifier: "OrderMapTableViewCell")
    /// Reuse identifier `OrderMarkTableViewCell`.
    static let orderMarkTableViewCell: Rswift.ReuseIdentifier<OrderMarkTableViewCell> = Rswift.ReuseIdentifier(identifier: "OrderMarkTableViewCell")
    /// Reuse identifier `OrderTextTableViewCell`.
    static let orderTextTableViewCell: Rswift.ReuseIdentifier<OrderTextTableViewCell> = Rswift.ReuseIdentifier(identifier: "OrderTextTableViewCell")
    /// Reuse identifier `PersonalCell`.
    static let personalCell: Rswift.ReuseIdentifier<PersonalProfileCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "PersonalCell")
    /// Reuse identifier `PhotoCollectionViewCell`.
    static let photoCollectionViewCell: Rswift.ReuseIdentifier<PhotoCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "PhotoCollectionViewCell")
    /// Reuse identifier `PhotoTableViewCell`.
    static let photoTableViewCell: Rswift.ReuseIdentifier<PhotoTableViewCell> = Rswift.ReuseIdentifier(identifier: "PhotoTableViewCell")
    /// Reuse identifier `PreviewPhotoTableViewCell`.
    static let previewPhotoTableViewCell: Rswift.ReuseIdentifier<PreviewPhotoTableViewCell> = Rswift.ReuseIdentifier(identifier: "PreviewPhotoTableViewCell")
    /// Reuse identifier `PreviewTextTableViewCell`.
    static let previewTextTableViewCell: Rswift.ReuseIdentifier<PreviewTextTableViewCell> = Rswift.ReuseIdentifier(identifier: "PreviewTextTableViewCell")
    /// Reuse identifier `PreviewVideoTableViewCell`.
    static let previewVideoTableViewCell: Rswift.ReuseIdentifier<PreviewVideoTableViewCell> = Rswift.ReuseIdentifier(identifier: "PreviewVideoTableViewCell")
    /// Reuse identifier `TaskCell`.
    static let taskCell: Rswift.ReuseIdentifier<SideMenuTableViewCell> = Rswift.ReuseIdentifier(identifier: "TaskCell")
    /// Reuse identifier `TaskPhotoCell`.
    static let taskPhotoCell: Rswift.ReuseIdentifier<TaskPhotoCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "TaskPhotoCell")
    /// Reuse identifier `VerifyCell`.
    static let verifyCell: Rswift.ReuseIdentifier<VerifyCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "VerifyCell")
    /// Reuse identifier `VideoTableViewCell`.
    static let videoTableViewCell: Rswift.ReuseIdentifier<VideoTableViewCell> = Rswift.ReuseIdentifier(identifier: "VideoTableViewCell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 21 storyboards.
  struct storyboard {
    /// Storyboard `AlertError`.
    static let alertError = _R.storyboard.alertError()
    /// Storyboard `CreateTaskStepTwo`.
    static let createTaskStepTwo = _R.storyboard.createTaskStepTwo()
    /// Storyboard `Dashboard`.
    static let dashboard = _R.storyboard.dashboard()
    /// Storyboard `Detail`.
    static let detail = _R.storyboard.detail()
    /// Storyboard `EmailVerification`.
    static let emailVerification = _R.storyboard.emailVerification()
    /// Storyboard `Filter`.
    static let filter = _R.storyboard.filter()
    /// Storyboard `FogotPassword`.
    static let fogotPassword = _R.storyboard.fogotPassword()
    /// Storyboard `JivoSite`.
    static let jivoSite = _R.storyboard.jivoSite()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Map`.
    static let map = _R.storyboard.map()
    /// Storyboard `MenuHeader`.
    static let menuHeader = _R.storyboard.menuHeader()
    /// Storyboard `Menu`.
    static let menu = _R.storyboard.menu()
    /// Storyboard `Other`.
    static let other = _R.storyboard.other()
    /// Storyboard `Profile`.
    static let profile = _R.storyboard.profile()
    /// Storyboard `Promo`.
    static let promo = _R.storyboard.promo()
    /// Storyboard `QRCode`.
    static let qrCode = _R.storyboard.qrCode()
    /// Storyboard `Settings`.
    static let settings = _R.storyboard.settings()
    /// Storyboard `SignIn`.
    static let signIn = _R.storyboard.signIn()
    /// Storyboard `SignUpStepTwo`.
    static let signUpStepTwo = _R.storyboard.signUpStepTwo()
    /// Storyboard `SignUp`.
    static let signUp = _R.storyboard.signUp()
    /// Storyboard `Task`.
    static let task = _R.storyboard.task()
    
    /// `UIStoryboard(name: "AlertError", bundle: ...)`
    static func alertError(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.alertError)
    }
    
    /// `UIStoryboard(name: "CreateTaskStepTwo", bundle: ...)`
    static func createTaskStepTwo(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.createTaskStepTwo)
    }
    
    /// `UIStoryboard(name: "Dashboard", bundle: ...)`
    static func dashboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.dashboard)
    }
    
    /// `UIStoryboard(name: "Detail", bundle: ...)`
    static func detail(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.detail)
    }
    
    /// `UIStoryboard(name: "EmailVerification", bundle: ...)`
    static func emailVerification(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.emailVerification)
    }
    
    /// `UIStoryboard(name: "Filter", bundle: ...)`
    static func filter(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.filter)
    }
    
    /// `UIStoryboard(name: "FogotPassword", bundle: ...)`
    static func fogotPassword(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.fogotPassword)
    }
    
    /// `UIStoryboard(name: "JivoSite", bundle: ...)`
    static func jivoSite(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.jivoSite)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Map", bundle: ...)`
    static func map(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.map)
    }
    
    /// `UIStoryboard(name: "Menu", bundle: ...)`
    static func menu(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.menu)
    }
    
    /// `UIStoryboard(name: "MenuHeader", bundle: ...)`
    static func menuHeader(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.menuHeader)
    }
    
    /// `UIStoryboard(name: "Other", bundle: ...)`
    static func other(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.other)
    }
    
    /// `UIStoryboard(name: "Profile", bundle: ...)`
    static func profile(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.profile)
    }
    
    /// `UIStoryboard(name: "Promo", bundle: ...)`
    static func promo(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.promo)
    }
    
    /// `UIStoryboard(name: "QRCode", bundle: ...)`
    static func qrCode(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.qrCode)
    }
    
    /// `UIStoryboard(name: "Settings", bundle: ...)`
    static func settings(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.settings)
    }
    
    /// `UIStoryboard(name: "SignIn", bundle: ...)`
    static func signIn(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.signIn)
    }
    
    /// `UIStoryboard(name: "SignUp", bundle: ...)`
    static func signUp(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.signUp)
    }
    
    /// `UIStoryboard(name: "SignUpStepTwo", bundle: ...)`
    static func signUpStepTwo(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.signUpStepTwo)
    }
    
    /// `UIStoryboard(name: "Task", bundle: ...)`
    static func task(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.task)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 199 localization keys.
    struct localizable {
      /// Base translation: $
      /// 
      /// Locales: Base, ru, en
      static let currency = Rswift.StringResource(key: "Currency", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: A video should not last longer than 1 minute and be bigger than 50 MB.
      /// 
      /// Locales: Base, ru, en
      static let aVideoShouldNotLastLongerThan1MinuteAndBeBiggerThan50MB = Rswift.StringResource(key: "A video should not last longer than 1 minute and be bigger than 50 MB.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: A video should not last longer than 1 minute.
      /// 
      /// Locales: Base, ru, en
      static let aVideoShouldNotLastLongerThan1Minute = Rswift.StringResource(key: "A video should not last longer than 1 minute.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: ACTIVE
      /// 
      /// Locales: Base, ru, en
      static let activE = Rswift.StringResource(key: "ACTIVE", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: APPROVE
      /// 
      /// Locales: Base, ru, en
      static let approvE = Rswift.StringResource(key: "APPROVE", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Add a field
      /// 
      /// Locales: Base, ru, en
      static let addAField = Rswift.StringResource(key: "Add a field", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Address
      /// 
      /// Locales: Base, ru, en
      static let address = Rswift.StringResource(key: "Address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Address of Etherium wallet
      /// 
      /// Locales: Base, ru, en
      static let addressOfEtheriumWallet = Rswift.StringResource(key: "Address of Etherium wallet", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: All
      /// 
      /// Locales: Base, ru, en
      static let all = Rswift.StringResource(key: "All", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: All fields should be filled
      /// 
      /// Locales: Base, ru, en
      static let taskErrorDescription = Rswift.StringResource(key: "TaskErrorDescription", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Apartment
      /// 
      /// Locales: Base, ru, en
      static let apartment = Rswift.StringResource(key: "Apartment", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: App Usability Reviews
      /// 
      /// Locales: Base, ru, en
      static let subject5 = Rswift.StringResource(key: "Subject 5", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Approve
      /// 
      /// Locales: Base, ru, en
      static let approve = Rswift.StringResource(key: "Approve", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Avatar
      /// 
      /// Locales: Base, ru, en
      static let avatar = Rswift.StringResource(key: "Avatar", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Back
      /// 
      /// Locales: Base, ru, en
      static let back = Rswift.StringResource(key: "Back", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Balance
      /// 
      /// Locales: Base, ru, en
      static let balance = Rswift.StringResource(key: "Balance", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Birth date
      /// 
      /// Locales: Base, ru, en
      static let birthDate = Rswift.StringResource(key: "Birth date", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: By address
      /// 
      /// Locales: Base, ru, en
      static let byAddress = Rswift.StringResource(key: "By address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: By contents
      /// 
      /// Locales: Base, ru, en
      static let byContents = Rswift.StringResource(key: "By contents", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: By radius
      /// 
      /// Locales: Base, ru, en
      static let byRadius = Rswift.StringResource(key: "By radius", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: By time of execution
      /// 
      /// Locales: Base, ru, en
      static let byTimeOfExecution = Rswift.StringResource(key: "By time of execution", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: CREATE
      /// 
      /// Locales: Base, ru, en
      static let creatE = Rswift.StringResource(key: "CREATE", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Cancel
      /// 
      /// Locales: Base, ru, en
      static let cancel = Rswift.StringResource(key: "Cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Choose a content
      /// 
      /// Locales: Base, ru, en
      static let chooseAContent = Rswift.StringResource(key: "Choose a content", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Choose a radius
      /// 
      /// Locales: Base, ru, en
      static let chooseARadius = Rswift.StringResource(key: "Choose a radius", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Choose date
      /// 
      /// Locales: Base, ru, en
      static let chooseADate = Rswift.StringResource(key: "Choose a date", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Choose item
      /// 
      /// Locales: Base, ru, en
      static let chooseItem = Rswift.StringResource(key: "Choose item", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Choose the country
      /// 
      /// Locales: Base, ru, en
      static let chooseTheCountry = Rswift.StringResource(key: "Choose the country", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Choose type address
      /// 
      /// Locales: Base, ru, en
      static let chooseTypeAddress = Rswift.StringResource(key: "Choose type address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: City
      /// 
      /// Locales: Base, ru, en
      static let city = Rswift.StringResource(key: "City", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Complete your order by adding the fields that are necessary to complete the tasks
      /// 
      /// Locales: Base, ru, en
      static let completeYourOrderByAddingTheFieldsThatAreNecessaryToCompleteTheTasks = Rswift.StringResource(key: "Complete your order by adding the fields that are necessary to complete the tasks", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Confirm by photos
      /// 
      /// Locales: Base, ru, en
      static let confirmByPhotos = Rswift.StringResource(key: "Confirm by photos", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Confirm by text
      /// 
      /// Locales: Base, ru, en
      static let confirmByText = Rswift.StringResource(key: "Confirm by text", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Confirm by video
      /// 
      /// Locales: Base, ru, en
      static let confirmByVideo = Rswift.StringResource(key: "Confirm by video", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Continue
      /// 
      /// Locales: Base, ru, en
      static let `continue` = Rswift.StringResource(key: "Continue", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Country
      /// 
      /// Locales: Base, ru, en
      static let country = Rswift.StringResource(key: "Country", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Create new order
      /// 
      /// Locales: Base, ru, en
      static let createNewOrder = Rswift.StringResource(key: "Create new order", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Crediting of tokens
      /// 
      /// Locales: Base, ru, en
      static let subject4 = Rswift.StringResource(key: "Subject 4", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: DONE
      /// 
      /// Locales: Base, ru, en
      static let donE = Rswift.StringResource(key: "DONE", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Date
      /// 
      /// Locales: Base, ru, en
      static let date = Rswift.StringResource(key: "Date", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Date & Time for verification
      /// 
      /// Locales: Base, ru, en
      static let dateTitle = Rswift.StringResource(key: "Date title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Deals
      /// 
      /// Locales: Base, ru, en
      static let deals = Rswift.StringResource(key: "Deals", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Describe shortly what is necessary
      /// 
      /// Locales: Base, ru, en
      static let describeShortlyWhatIsNecessary = Rswift.StringResource(key: "Describe shortly what is necessary", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Description
      /// 
      /// Locales: Base, ru, en
      static let description = Rswift.StringResource(key: "Description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Details
      /// 
      /// Locales: Base, ru, en
      static let details = Rswift.StringResource(key: "Details", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Do not have account?
      /// 
      /// Locales: Base, ru, en
      static let doNotHaveAccount = Rswift.StringResource(key: "Do not have account", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Done
      /// 
      /// Locales: Base, ru, en
      static let done = Rswift.StringResource(key: "Done", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Email
      /// 
      /// Locales: Base, ru, en
      static let email = Rswift.StringResource(key: "Email", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Enter address: city, street, house
      /// 
      /// Locales: Base, ru, en
      static let addressPlaceholder = Rswift.StringResource(key: "Address placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Enter promo code
      /// 
      /// Locales: Base, ru, en
      static let enterPromoCode = Rswift.StringResource(key: "Enter promo code", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Enter the address
      /// 
      /// Locales: Base, ru, en
      static let enterTheAddress = Rswift.StringResource(key: "Enter the address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Enter the description
      /// 
      /// Locales: Base, ru, en
      static let enterTheDescription = Rswift.StringResource(key: "Enter the description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Enter your ID or Login
      /// 
      /// Locales: Base, ru, en
      static let enterYourId = Rswift.StringResource(key: "Enter your id", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Enter your confirm password please.
      /// 
      /// Locales: Base, ru, en
      static let confirmPasswordErrorMessage = Rswift.StringResource(key: "ConfirmPasswordErrorMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Enter your password please.
      /// 
      /// Locales: Base, ru, en
      static let passwordErrorMessage = Rswift.StringResource(key: "PasswordErrorMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Enter your promo code
      /// 
      /// Locales: Base, ru, en
      static let enterYourPromoCode = Rswift.StringResource(key: "Enter your promo code", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Equipment
      /// 
      /// Locales: Base, ru, en
      static let equipment = Rswift.StringResource(key: "Equipment", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Error
      /// 
      /// Locales: Base, ru, en
      static let error = Rswift.StringResource(key: "Error", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Error
      /// 
      /// Locales: Base, ru, en
      static let internetErrorTitle = Rswift.StringResource(key: "InternetErrorTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Error
      /// 
      /// Locales: Base, ru, en
      static let loginErrorTitle = Rswift.StringResource(key: "LoginErrorTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Error
      /// 
      /// Locales: Base, ru, en
      static let taskErrorTitle = Rswift.StringResource(key: "TaskErrorTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Error of  order transfer
      /// 
      /// Locales: Base, ru, en
      static let subject2 = Rswift.StringResource(key: "Subject 2", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Error of app usability
      /// 
      /// Locales: Base, ru, en
      static let subject1 = Rswift.StringResource(key: "Subject 1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Error of order execution
      /// 
      /// Locales: Base, ru, en
      static let subject3 = Rswift.StringResource(key: "Subject 3", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Events
      /// 
      /// Locales: Base, ru, en
      static let events = Rswift.StringResource(key: "Events", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Facebook
      /// 
      /// Locales: Base, ru, en
      static let facebook = Rswift.StringResource(key: "Facebook", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Feedback
      /// 
      /// Locales: Base, ru, en
      static let feedback = Rswift.StringResource(key: "Feedback", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Field of the order
      /// 
      /// Locales: Base, ru, en
      static let fieldOfTheOrder = Rswift.StringResource(key: "Field of the order", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Fill out the fields of order to be verified
      /// 
      /// Locales: Base, ru, en
      static let fillOutTheFieldsOfOrderToBeVerified = Rswift.StringResource(key: "Fill out the fields of order to be verified", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Fill this field..
      /// 
      /// Locales: Base, ru, en
      static let fillThisField = Rswift.StringResource(key: "Fill this field...", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Filters
      /// 
      /// Locales: Base, ru, en
      static let filters = Rswift.StringResource(key: "Filters", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: First Name
      /// 
      /// Locales: Base, ru, en
      static let firstName = Rswift.StringResource(key: "First name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Forgot your data?
      /// 
      /// Locales: Base, ru, en
      static let fogotPassword = Rswift.StringResource(key: "Fogot Password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Formulate the order fields
      /// 
      /// Locales: Base, ru, en
      static let formulateTheOrderFields = Rswift.StringResource(key: "Formulate the order fields", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: From
      /// 
      /// Locales: Base, ru, en
      static let from = Rswift.StringResource(key: "From", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Hash
      /// 
      /// Locales: Base, ru, en
      static let hash = Rswift.StringResource(key: "Hash", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Help with sing in.
      /// 
      /// Locales: Base, ru, en
      static let helpWithSingIn = Rswift.StringResource(key: "Help with sing in", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: House
      /// 
      /// Locales: Base, ru, en
      static let house = Rswift.StringResource(key: "House", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: ID data
      /// 
      /// Locales: Base, ru, en
      static let idData = Rswift.StringResource(key: "ID data", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: If you have QR code,   scan it to enter applications
      /// 
      /// Locales: Base, ru, en
      static let qrEnter = Rswift.StringResource(key: "QR enter", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: If you have promo code, please enter
      /// 
      /// Locales: Base, ru, en
      static let ifYouHavePromoCodePleaseEnter = Rswift.StringResource(key: "If you have promo code, please enter", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: If you liked the app, share it with friends via the link
      /// 
      /// Locales: Base, ru, en
      static let ifYouLikedTheAppShareItWithFriendsViaTheLink = Rswift.StringResource(key: "If you liked the app, share it with friends via the link", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: If you liked the application, please, share it with your friends with a reference link.
      /// 
      /// Locales: Base, ru, en
      static let ifYouLikedTheApplicationPleaseShareItWithYourFriendsWithAReferenceLink = Rswift.StringResource(key: "If you liked the application, please, share it with your friends with a reference link.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: In work
      /// 
      /// Locales: Base, ru, en
      static let inWork = Rswift.StringResource(key: "In work", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Incorrect QR-code
      /// 
      /// Locales: Base, ru, en
      static let errorIncorrectQrCode = Rswift.StringResource(key: "Error incorrect qr code", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Incorrect login or password
      /// 
      /// Locales: Base, ru, en
      static let loginErrorDescription = Rswift.StringResource(key: "LoginErrorDescription", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Individul
      /// 
      /// Locales: Base, ru, en
      static let individual = Rswift.StringResource(key: "Individual", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Items in Shop
      /// 
      /// Locales: Base, ru, en
      static let itemsInShop = Rswift.StringResource(key: "Items in Shop", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Last Name
      /// 
      /// Locales: Base, ru, en
      static let lastName = Rswift.StringResource(key: "Last name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Log Out
      /// 
      /// Locales: Base, ru, en
      static let logOut = Rswift.StringResource(key: "Log Out", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Login
      /// 
      /// Locales: Base, ru, en
      static let login = Rswift.StringResource(key: "Login", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Login via
      /// 
      /// Locales: Base, ru, en
      static let loginVia = Rswift.StringResource(key: "Login via", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: MORE OF THE WEBSITE
      /// 
      /// Locales: Base, ru, en
      static let moreofthewebsitE = Rswift.StringResource(key: "MORE OF THE WEBSITE", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Map a route
      /// 
      /// Locales: Base, ru, en
      static let mapARoute = Rswift.StringResource(key: "Map a route", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Menu
      /// 
      /// Locales: Base, ru, en
      static let menu = Rswift.StringResource(key: "Menu", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Middle Name
      /// 
      /// Locales: Base, ru, en
      static let middleName = Rswift.StringResource(key: "Middle name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: My Account
      /// 
      /// Locales: Base, ru, en
      static let myAccount = Rswift.StringResource(key: "My Account", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: My Orders
      /// 
      /// Locales: Base, ru, en
      static let myOrders = Rswift.StringResource(key: "My Orders", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Name
      /// 
      /// Locales: Base, ru, en
      static let name = Rswift.StringResource(key: "Name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Name of the Order
      /// 
      /// Locales: Base, ru, en
      static let nameOfTheOrder = Rswift.StringResource(key: "Name of the Order", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Name of the Order
      /// 
      /// Locales: Base, ru, en
      static let orderName = Rswift.StringResource(key: "Order name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Name of the field
      /// 
      /// Locales: Base, ru, en
      static let nameOfTheField = Rswift.StringResource(key: "Name of the field", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Nationality
      /// 
      /// Locales: Base, ru, en
      static let nationality = Rswift.StringResource(key: "Nationality", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Need to fill all fields
      /// 
      /// Locales: Base, ru, en
      static let errorFillAllFields = Rswift.StringResource(key: "Error fill all fields", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: New verifier
      /// 
      /// Locales: Base, ru, en
      static let newVerifier = Rswift.StringResource(key: "New verifier", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Next
      /// 
      /// Locales: Base, ru, en
      static let next = Rswift.StringResource(key: "Next", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: No tasks
      /// 
      /// Locales: Base, ru, en
      static let noTasks = Rswift.StringResource(key: "No tasks", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: No tasks
      /// 
      /// Locales: Base, ru, en
      static let noTasksDone = Rswift.StringResource(key: "No tasks done", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Office
      /// 
      /// Locales: Base, ru, en
      static let office = Rswift.StringResource(key: "Office", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Online purchases
      /// 
      /// Locales: Base, ru, en
      static let onlinePurchases = Rswift.StringResource(key: "Online purchases", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Order fields
      /// 
      /// Locales: Base, ru, en
      static let orderFields = Rswift.StringResource(key: "Order fields", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Order topic
      /// 
      /// Locales: Base, ru, en
      static let subjectOfOrder = Rswift.StringResource(key: "Subject of order", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Orders to be verified
      /// 
      /// Locales: Base, ru, en
      static let ordersToBeVerified = Rswift.StringResource(key: "Orders to be verified", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Others
      /// 
      /// Locales: Base, ru, en
      static let others = Rswift.StringResource(key: "Others", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Passport issue
      /// 
      /// Locales: Base, ru, en
      static let passportIssue = Rswift.StringResource(key: "Passport issue", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Passport issue code
      /// 
      /// Locales: Base, ru, en
      static let passportIssueCode = Rswift.StringResource(key: "Passport issue code", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Passport issue date
      /// 
      /// Locales: Base, ru, en
      static let passportIssueDate = Rswift.StringResource(key: "Passport issue date", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Passport number
      /// 
      /// Locales: Base, ru, en
      static let passportNumber = Rswift.StringResource(key: "Passport number", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Passport series
      /// 
      /// Locales: Base, ru, en
      static let passportSeries = Rswift.StringResource(key: "Passport series", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Password
      /// 
      /// Locales: Base, ru, en
      static let password = Rswift.StringResource(key: "Password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Personal Estate
      /// 
      /// Locales: Base, ru, en
      static let personalEstate = Rswift.StringResource(key: "Personal Estate", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Personal data
      /// 
      /// Locales: Base, ru, en
      static let personalData = Rswift.StringResource(key: "Personal data", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Personalize your Verifier account by uploading your photo
      /// 
      /// Locales: Base, ru, en
      static let uploadingPhoto = Rswift.StringResource(key: "Uploading photo", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Phone
      /// 
      /// Locales: Base, ru, en
      static let phone = Rswift.StringResource(key: "Phone", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Please add photo
      /// 
      /// Locales: Base, ru, en
      static let add_photo = Rswift.StringResource(key: "add_photo", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Please check your internet connection and try again.
      /// 
      /// Locales: Base, ru, en
      static let internetErrorMessage = Rswift.StringResource(key: "InternetErrorMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Please enter 8 symbols
      /// 
      /// Locales: Base, ru, en
      static let pleaseEnter8Symbols = Rswift.StringResource(key: "Please enter 8 symbols", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Please, enter the reason of return
      /// 
      /// Locales: Base, ru, en
      static let pleaseEnterTheReasonOfReturn = Rswift.StringResource(key: "Please, enter the reason of return", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Profile
      /// 
      /// Locales: Base, ru, en
      static let profile = Rswift.StringResource(key: "Profile", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Promo is empty. Do you want to continue?
      /// 
      /// Locales: Base, ru, en
      static let promoIsEmptyDoYouWantToContinue = Rswift.StringResource(key: "Promo is empty. Do you want to continue?", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Promo isn't correct
      /// 
      /// Locales: Base, ru, en
      static let promoIsnTCorrect = Rswift.StringResource(key: "Promo isn't correct", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Put a mark on the map or enter the address, around which you'd like to view the orders
      /// 
      /// Locales: Base, ru, en
      static let mapFilter = Rswift.StringResource(key: "Map filter", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: QR-code
      /// 
      /// Locales: Base, ru, en
      static let qrCode = Rswift.StringResource(key: "QR-code", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Range of order execution
      /// 
      /// Locales: Base, ru, en
      static let rangeOfOrderExecution = Rswift.StringResource(key: "Range of order execution", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Ready
      /// 
      /// Locales: Base, ru, en
      static let ready = Rswift.StringResource(key: "Ready", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Real Estate
      /// 
      /// Locales: Base, ru, en
      static let realEstate = Rswift.StringResource(key: "Real Estate", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Record a Video
      /// 
      /// Locales: Base, ru, en
      static let recordAVideo = Rswift.StringResource(key: "Record a Video", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Region
      /// 
      /// Locales: Base, ru, en
      static let region = Rswift.StringResource(key: "Region", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Registration
      /// 
      /// Locales: Base, ru, en
      static let registration = Rswift.StringResource(key: "Registration", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Remove photo
      /// 
      /// Locales: Base, ru, en
      static let removePhoto = Rswift.StringResource(key: "Remove photo", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Repeat password
      /// 
      /// Locales: Base, en
      static let repeatPassword = Rswift.StringResource(key: "Repeat password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: SEND
      /// 
      /// Locales: Base, ru, en
      static let senD = Rswift.StringResource(key: "SEND", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: START
      /// 
      /// Locales: Base, ru, en
      static let starT = Rswift.StringResource(key: "START", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Save
      /// 
      /// Locales: Base, ru, en
      static let save = Rswift.StringResource(key: "Save", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Save the order
      /// 
      /// Locales: Base, ru, en
      static let saveTheOrder = Rswift.StringResource(key: "Save the order", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Scan
      /// 
      /// Locales: Base, ru, en
      static let scan = Rswift.StringResource(key: "Scan", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Select additional means your order to be confirmed
      /// 
      /// Locales: Base, ru, en
      static let selectAdditionalMeansYourOrderToBeConfirmed = Rswift.StringResource(key: "Select additional means your order to be confirmed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Select the language
      /// 
      /// Locales: Base, ru, en
      static let selectTheLanguage = Rswift.StringResource(key: "Select the language", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Select the number of photos
      /// 
      /// Locales: Base, ru, en
      static let selectTheNumberOfPhotos = Rswift.StringResource(key: "Select the number of photos", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Select the period within which you'd like to view the orders
      /// 
      /// Locales: Base, ru, en
      static let period = Rswift.StringResource(key: "Period", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Select the period within which you'd like to view the orders
      /// 
      /// Locales: Base, ru, en
      static let selectThePeriodWithinWhichYouDLikeToViewTheOrders = Rswift.StringResource(key: "Select the period within which you'd like to view the orders", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Select the radius on the map and enter the address, around which you'd like to view the orders
      /// 
      /// Locales: Base, ru, en
      static let radiusFilter = Rswift.StringResource(key: "Radius filter", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Settings
      /// 
      /// Locales: Base, ru, en
      static let settings = Rswift.StringResource(key: "Settings", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Settings
      /// 
      /// Locales: Base, ru, en
      static let settingsNav = Rswift.StringResource(key: "Settings nav", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Share the application
      /// 
      /// Locales: Base, ru, en
      static let shareTheApplication = Rswift.StringResource(key: "Share the application", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Share your promocode with your friend to get bonus tokens
      /// 
      /// Locales: Base, ru, en
      static let shareYourPromocodeWithYourFriendToGetBonusTokens = Rswift.StringResource(key: "Share your promocode with your friend to get bonus tokens", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Sign Up.
      /// 
      /// Locales: Base, ru, en
      static let signUp = Rswift.StringResource(key: "Sign Up", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Sign up to find out maximum features of the application Verifire
      /// 
      /// Locales: Base, ru, en
      static let registrationInfo = Rswift.StringResource(key: "Registration Info", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Specialization
      /// 
      /// Locales: Base, ru, en
      static let specialization = Rswift.StringResource(key: "Specialization", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Stage 1
      /// 
      /// Locales: Base, ru, en
      static let step1 = Rswift.StringResource(key: "Step 1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Stage 2
      /// 
      /// Locales: Base, ru, en
      static let step2 = Rswift.StringResource(key: "Step 2", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Street
      /// 
      /// Locales: Base, ru, en
      static let street = Rswift.StringResource(key: "Street", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Subject of your message
      /// 
      /// Locales: Base, ru, en
      static let subjectOfYourMessage = Rswift.StringResource(key: "Subject of your message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Take a Photo
      /// 
      /// Locales: Base, ru, en
      static let takeAPhoto = Rswift.StringResource(key: "Take a Photo", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Task is Done! Wait for customer approval!
      /// 
      /// Locales: Base, ru, en
      static let alertTaskIsDone = Rswift.StringResource(key: "AlertTaskIsDone", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Task is Done! Wait for customer approval!
      /// 
      /// Locales: Base, ru, en
      static let titlePopUp = Rswift.StringResource(key: "TitlePopUp", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Tasks
      /// 
      /// Locales: Base, ru, en
      static let tasks = Rswift.StringResource(key: "Tasks", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Thank you for your feedback
      /// 
      /// Locales: Base, ru, en
      static let thankYouForYourFeedback = Rswift.StringResource(key: "Thank you for your feedback", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: The size of a video should not be bigger than 50 MB.
      /// 
      /// Locales: Base, ru, en
      static let theSizeOfAVideoShouldNotBeBiggerThan50MB = Rswift.StringResource(key: "The size of a video should not be bigger than 50 MB.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Through
      /// 
      /// Locales: Base, ru, en
      static let through = Rswift.StringResource(key: "through", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Time
      /// 
      /// Locales: Base, ru, en
      static let time = Rswift.StringResource(key: "Time", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: To
      /// 
      /// Locales: Base, ru, en
      static let to = Rswift.StringResource(key: "To", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Today
      /// 
      /// Locales: Base, ru, en
      static let today = Rswift.StringResource(key: "Today", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Tomorrow
      /// 
      /// Locales: Base, ru, en
      static let tomorrow = Rswift.StringResource(key: "Tomorrow", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Twitter
      /// 
      /// Locales: Base, ru, en
      static let twitter = Rswift.StringResource(key: "Twitter", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Type of the order
      /// 
      /// Locales: Base, ru, en
      static let typeOfTheOrder = Rswift.StringResource(key: "Type of the order", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Verification of Individual
      /// 
      /// Locales: Base, ru, en
      static let switchLabel = Rswift.StringResource(key: "Switch label", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Verification of order
      /// 
      /// Locales: Base, ru, en
      static let verificationOfOrder = Rswift.StringResource(key: "Verification of order", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Verify
      /// 
      /// Locales: Base, ru, en
      static let verify = Rswift.StringResource(key: "Verify", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: View with a map
      /// 
      /// Locales: Base, ru, en
      static let viewWithAMap = Rswift.StringResource(key: "View with a map", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Wallet
      /// 
      /// Locales: Base, ru, en
      static let wallet = Rswift.StringResource(key: "Wallet", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Withdraw money
      /// 
      /// Locales: Base, ru, en
      static let withdrawMoney = Rswift.StringResource(key: "Withdraw money", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Within 1 month
      /// 
      /// Locales: Base, ru, en
      static let within1Month = Rswift.StringResource(key: "Within 1 month", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Within 1 week
      /// 
      /// Locales: Base, ru, en
      static let within1Week = Rswift.StringResource(key: "Within 1 week", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Work Place
      /// 
      /// Locales: Base, ru, en
      static let workPlace = Rswift.StringResource(key: "Work Place", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: You are outside execution zone
      /// 
      /// Locales: Base, ru, en
      static let alertOrderVerifier = Rswift.StringResource(key: "AlertOrderVerifier", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: You must fill out all the profile information
      /// 
      /// Locales: Base, ru, en
      static let verifyInfoError = Rswift.StringResource(key: "Verify info error", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Your E-Mail or ID
      /// 
      /// Locales: Base, ru, en
      static let yourEMailOrID = Rswift.StringResource(key: "Your E-Mail or ID", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Your Password
      /// 
      /// Locales: Base, ru, en
      static let yourPassword = Rswift.StringResource(key: "Your Password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Your email is invalid.
      /// 
      /// Locales: Base, ru, en
      static let emailErrorMessage = Rswift.StringResource(key: "EmailErrorMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Your passwords do not match.
      /// 
      /// Locales: Base, ru, en
      static let confirmAndPasswordErrorMessage = Rswift.StringResource(key: "ConfirmAndPasswordErrorMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Your personal info has been successfully changed
      /// 
      /// Locales: Base, ru, en
      static let successChangePersonalInfo = Rswift.StringResource(key: "Success change personal info", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Your promocode
      /// 
      /// Locales: Base, ru, en
      static let yourPromocode = Rswift.StringResource(key: "Your promocode", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: You’ve got
      /// 
      /// Locales: Base, ru, en
      static let youVeGot = Rswift.StringResource(key: "You’ve got", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: ZIP code
      /// 
      /// Locales: Base, ru, en
      static let zipCode = Rswift.StringResource(key: "ZIP code", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: dd.mm.yyyy
      /// 
      /// Locales: Base, ru, en
      static let ddMmYyyy = Rswift.StringResource(key: "dd.mm.yyyy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: en
      /// 
      /// Locales: Base, ru, en
      static let appLanguage = Rswift.StringResource(key: "AppLanguage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: to Vote
      /// 
      /// Locales: Base, ru, en
      static let toVote = Rswift.StringResource(key: "To Vote", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: тип адреса
      /// 
      /// Locales: Base, ru, en
      static let addressType = Rswift.StringResource(key: "Address Type", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      
      /// Base translation: $
      /// 
      /// Locales: Base, ru, en
      static func currency(_: Void = ()) -> String {
        return NSLocalizedString("Currency", bundle: R.hostingBundle, value: "$", comment: "")
      }
      
      /// Base translation: A video should not last longer than 1 minute and be bigger than 50 MB.
      /// 
      /// Locales: Base, ru, en
      static func aVideoShouldNotLastLongerThan1MinuteAndBeBiggerThan50MB(_: Void = ()) -> String {
        return NSLocalizedString("A video should not last longer than 1 minute and be bigger than 50 MB.", bundle: R.hostingBundle, value: "A video should not last longer than 1 minute and be bigger than 50 MB.", comment: "")
      }
      
      /// Base translation: A video should not last longer than 1 minute.
      /// 
      /// Locales: Base, ru, en
      static func aVideoShouldNotLastLongerThan1Minute(_: Void = ()) -> String {
        return NSLocalizedString("A video should not last longer than 1 minute.", bundle: R.hostingBundle, value: "A video should not last longer than 1 minute.", comment: "")
      }
      
      /// Base translation: ACTIVE
      /// 
      /// Locales: Base, ru, en
      static func activE(_: Void = ()) -> String {
        return NSLocalizedString("ACTIVE", bundle: R.hostingBundle, value: "ACTIVE", comment: "")
      }
      
      /// Base translation: APPROVE
      /// 
      /// Locales: Base, ru, en
      static func approvE(_: Void = ()) -> String {
        return NSLocalizedString("APPROVE", bundle: R.hostingBundle, value: "APPROVE", comment: "")
      }
      
      /// Base translation: Add a field
      /// 
      /// Locales: Base, ru, en
      static func addAField(_: Void = ()) -> String {
        return NSLocalizedString("Add a field", bundle: R.hostingBundle, value: "Add a field", comment: "")
      }
      
      /// Base translation: Address
      /// 
      /// Locales: Base, ru, en
      static func address(_: Void = ()) -> String {
        return NSLocalizedString("Address", bundle: R.hostingBundle, value: "Address", comment: "")
      }
      
      /// Base translation: Address of Etherium wallet
      /// 
      /// Locales: Base, ru, en
      static func addressOfEtheriumWallet(_: Void = ()) -> String {
        return NSLocalizedString("Address of Etherium wallet", bundle: R.hostingBundle, value: "Address of Etherium wallet", comment: "")
      }
      
      /// Base translation: All
      /// 
      /// Locales: Base, ru, en
      static func all(_: Void = ()) -> String {
        return NSLocalizedString("All", bundle: R.hostingBundle, value: "All", comment: "")
      }
      
      /// Base translation: All fields should be filled
      /// 
      /// Locales: Base, ru, en
      static func taskErrorDescription(_: Void = ()) -> String {
        return NSLocalizedString("TaskErrorDescription", bundle: R.hostingBundle, value: "All fields should be filled", comment: "")
      }
      
      /// Base translation: Apartment
      /// 
      /// Locales: Base, ru, en
      static func apartment(_: Void = ()) -> String {
        return NSLocalizedString("Apartment", bundle: R.hostingBundle, value: "Apartment", comment: "")
      }
      
      /// Base translation: App Usability Reviews
      /// 
      /// Locales: Base, ru, en
      static func subject5(_: Void = ()) -> String {
        return NSLocalizedString("Subject 5", bundle: R.hostingBundle, value: "App Usability Reviews", comment: "")
      }
      
      /// Base translation: Approve
      /// 
      /// Locales: Base, ru, en
      static func approve(_: Void = ()) -> String {
        return NSLocalizedString("Approve", bundle: R.hostingBundle, value: "Approve", comment: "")
      }
      
      /// Base translation: Avatar
      /// 
      /// Locales: Base, ru, en
      static func avatar(_: Void = ()) -> String {
        return NSLocalizedString("Avatar", bundle: R.hostingBundle, value: "Avatar", comment: "")
      }
      
      /// Base translation: Back
      /// 
      /// Locales: Base, ru, en
      static func back(_: Void = ()) -> String {
        return NSLocalizedString("Back", bundle: R.hostingBundle, value: "Back", comment: "")
      }
      
      /// Base translation: Balance
      /// 
      /// Locales: Base, ru, en
      static func balance(_: Void = ()) -> String {
        return NSLocalizedString("Balance", bundle: R.hostingBundle, value: "Balance", comment: "")
      }
      
      /// Base translation: Birth date
      /// 
      /// Locales: Base, ru, en
      static func birthDate(_: Void = ()) -> String {
        return NSLocalizedString("Birth date", bundle: R.hostingBundle, value: "Birth date", comment: "")
      }
      
      /// Base translation: By address
      /// 
      /// Locales: Base, ru, en
      static func byAddress(_: Void = ()) -> String {
        return NSLocalizedString("By address", bundle: R.hostingBundle, value: "By address", comment: "")
      }
      
      /// Base translation: By contents
      /// 
      /// Locales: Base, ru, en
      static func byContents(_: Void = ()) -> String {
        return NSLocalizedString("By contents", bundle: R.hostingBundle, value: "By contents", comment: "")
      }
      
      /// Base translation: By radius
      /// 
      /// Locales: Base, ru, en
      static func byRadius(_: Void = ()) -> String {
        return NSLocalizedString("By radius", bundle: R.hostingBundle, value: "By radius", comment: "")
      }
      
      /// Base translation: By time of execution
      /// 
      /// Locales: Base, ru, en
      static func byTimeOfExecution(_: Void = ()) -> String {
        return NSLocalizedString("By time of execution", bundle: R.hostingBundle, value: "By time of execution", comment: "")
      }
      
      /// Base translation: CREATE
      /// 
      /// Locales: Base, ru, en
      static func creatE(_: Void = ()) -> String {
        return NSLocalizedString("CREATE", bundle: R.hostingBundle, value: "CREATE", comment: "")
      }
      
      /// Base translation: Cancel
      /// 
      /// Locales: Base, ru, en
      static func cancel(_: Void = ()) -> String {
        return NSLocalizedString("Cancel", bundle: R.hostingBundle, value: "Cancel", comment: "")
      }
      
      /// Base translation: Choose a content
      /// 
      /// Locales: Base, ru, en
      static func chooseAContent(_: Void = ()) -> String {
        return NSLocalizedString("Choose a content", bundle: R.hostingBundle, value: "Choose a content", comment: "")
      }
      
      /// Base translation: Choose a radius
      /// 
      /// Locales: Base, ru, en
      static func chooseARadius(_: Void = ()) -> String {
        return NSLocalizedString("Choose a radius", bundle: R.hostingBundle, value: "Choose a radius", comment: "")
      }
      
      /// Base translation: Choose date
      /// 
      /// Locales: Base, ru, en
      static func chooseADate(_: Void = ()) -> String {
        return NSLocalizedString("Choose a date", bundle: R.hostingBundle, value: "Choose date", comment: "")
      }
      
      /// Base translation: Choose item
      /// 
      /// Locales: Base, ru, en
      static func chooseItem(_: Void = ()) -> String {
        return NSLocalizedString("Choose item", bundle: R.hostingBundle, value: "Choose item", comment: "")
      }
      
      /// Base translation: Choose the country
      /// 
      /// Locales: Base, ru, en
      static func chooseTheCountry(_: Void = ()) -> String {
        return NSLocalizedString("Choose the country", bundle: R.hostingBundle, value: "Choose the country", comment: "")
      }
      
      /// Base translation: Choose type address
      /// 
      /// Locales: Base, ru, en
      static func chooseTypeAddress(_: Void = ()) -> String {
        return NSLocalizedString("Choose type address", bundle: R.hostingBundle, value: "Choose type address", comment: "")
      }
      
      /// Base translation: City
      /// 
      /// Locales: Base, ru, en
      static func city(_: Void = ()) -> String {
        return NSLocalizedString("City", bundle: R.hostingBundle, value: "City", comment: "")
      }
      
      /// Base translation: Complete your order by adding the fields that are necessary to complete the tasks
      /// 
      /// Locales: Base, ru, en
      static func completeYourOrderByAddingTheFieldsThatAreNecessaryToCompleteTheTasks(_: Void = ()) -> String {
        return NSLocalizedString("Complete your order by adding the fields that are necessary to complete the tasks", bundle: R.hostingBundle, value: "Complete your order by adding the fields that are necessary to complete the tasks", comment: "")
      }
      
      /// Base translation: Confirm by photos
      /// 
      /// Locales: Base, ru, en
      static func confirmByPhotos(_: Void = ()) -> String {
        return NSLocalizedString("Confirm by photos", bundle: R.hostingBundle, value: "Confirm by photos", comment: "")
      }
      
      /// Base translation: Confirm by text
      /// 
      /// Locales: Base, ru, en
      static func confirmByText(_: Void = ()) -> String {
        return NSLocalizedString("Confirm by text", bundle: R.hostingBundle, value: "Confirm by text", comment: "")
      }
      
      /// Base translation: Confirm by video
      /// 
      /// Locales: Base, ru, en
      static func confirmByVideo(_: Void = ()) -> String {
        return NSLocalizedString("Confirm by video", bundle: R.hostingBundle, value: "Confirm by video", comment: "")
      }
      
      /// Base translation: Continue
      /// 
      /// Locales: Base, ru, en
      static func `continue`(_: Void = ()) -> String {
        return NSLocalizedString("Continue", bundle: R.hostingBundle, value: "Continue", comment: "")
      }
      
      /// Base translation: Country
      /// 
      /// Locales: Base, ru, en
      static func country(_: Void = ()) -> String {
        return NSLocalizedString("Country", bundle: R.hostingBundle, value: "Country", comment: "")
      }
      
      /// Base translation: Create new order
      /// 
      /// Locales: Base, ru, en
      static func createNewOrder(_: Void = ()) -> String {
        return NSLocalizedString("Create new order", bundle: R.hostingBundle, value: "Create new order", comment: "")
      }
      
      /// Base translation: Crediting of tokens
      /// 
      /// Locales: Base, ru, en
      static func subject4(_: Void = ()) -> String {
        return NSLocalizedString("Subject 4", bundle: R.hostingBundle, value: "Crediting of tokens", comment: "")
      }
      
      /// Base translation: DONE
      /// 
      /// Locales: Base, ru, en
      static func donE(_: Void = ()) -> String {
        return NSLocalizedString("DONE", bundle: R.hostingBundle, value: "DONE", comment: "")
      }
      
      /// Base translation: Date
      /// 
      /// Locales: Base, ru, en
      static func date(_: Void = ()) -> String {
        return NSLocalizedString("Date", bundle: R.hostingBundle, value: "Date", comment: "")
      }
      
      /// Base translation: Date & Time for verification
      /// 
      /// Locales: Base, ru, en
      static func dateTitle(_: Void = ()) -> String {
        return NSLocalizedString("Date title", bundle: R.hostingBundle, value: "Date & Time for verification", comment: "")
      }
      
      /// Base translation: Deals
      /// 
      /// Locales: Base, ru, en
      static func deals(_: Void = ()) -> String {
        return NSLocalizedString("Deals", bundle: R.hostingBundle, value: "Deals", comment: "")
      }
      
      /// Base translation: Describe shortly what is necessary
      /// 
      /// Locales: Base, ru, en
      static func describeShortlyWhatIsNecessary(_: Void = ()) -> String {
        return NSLocalizedString("Describe shortly what is necessary", bundle: R.hostingBundle, value: "Describe shortly what is necessary", comment: "")
      }
      
      /// Base translation: Description
      /// 
      /// Locales: Base, ru, en
      static func description(_: Void = ()) -> String {
        return NSLocalizedString("Description", bundle: R.hostingBundle, value: "Description", comment: "")
      }
      
      /// Base translation: Details
      /// 
      /// Locales: Base, ru, en
      static func details(_: Void = ()) -> String {
        return NSLocalizedString("Details", bundle: R.hostingBundle, value: "Details", comment: "")
      }
      
      /// Base translation: Do not have account?
      /// 
      /// Locales: Base, ru, en
      static func doNotHaveAccount(_: Void = ()) -> String {
        return NSLocalizedString("Do not have account", bundle: R.hostingBundle, value: "Do not have account?", comment: "")
      }
      
      /// Base translation: Done
      /// 
      /// Locales: Base, ru, en
      static func done(_: Void = ()) -> String {
        return NSLocalizedString("Done", bundle: R.hostingBundle, value: "Done", comment: "")
      }
      
      /// Base translation: Email
      /// 
      /// Locales: Base, ru, en
      static func email(_: Void = ()) -> String {
        return NSLocalizedString("Email", bundle: R.hostingBundle, value: "Email", comment: "")
      }
      
      /// Base translation: Enter address: city, street, house
      /// 
      /// Locales: Base, ru, en
      static func addressPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("Address placeholder", bundle: R.hostingBundle, value: "Enter address: city, street, house", comment: "")
      }
      
      /// Base translation: Enter promo code
      /// 
      /// Locales: Base, ru, en
      static func enterPromoCode(_: Void = ()) -> String {
        return NSLocalizedString("Enter promo code", bundle: R.hostingBundle, value: "Enter promo code", comment: "")
      }
      
      /// Base translation: Enter the address
      /// 
      /// Locales: Base, ru, en
      static func enterTheAddress(_: Void = ()) -> String {
        return NSLocalizedString("Enter the address", bundle: R.hostingBundle, value: "Enter the address", comment: "")
      }
      
      /// Base translation: Enter the description
      /// 
      /// Locales: Base, ru, en
      static func enterTheDescription(_: Void = ()) -> String {
        return NSLocalizedString("Enter the description", bundle: R.hostingBundle, value: "Enter the description", comment: "")
      }
      
      /// Base translation: Enter your ID or Login
      /// 
      /// Locales: Base, ru, en
      static func enterYourId(_: Void = ()) -> String {
        return NSLocalizedString("Enter your id", bundle: R.hostingBundle, value: "Enter your ID or Login", comment: "")
      }
      
      /// Base translation: Enter your confirm password please.
      /// 
      /// Locales: Base, ru, en
      static func confirmPasswordErrorMessage(_: Void = ()) -> String {
        return NSLocalizedString("ConfirmPasswordErrorMessage", bundle: R.hostingBundle, value: "Enter your confirm password please.", comment: "")
      }
      
      /// Base translation: Enter your password please.
      /// 
      /// Locales: Base, ru, en
      static func passwordErrorMessage(_: Void = ()) -> String {
        return NSLocalizedString("PasswordErrorMessage", bundle: R.hostingBundle, value: "Enter your password please.", comment: "")
      }
      
      /// Base translation: Enter your promo code
      /// 
      /// Locales: Base, ru, en
      static func enterYourPromoCode(_: Void = ()) -> String {
        return NSLocalizedString("Enter your promo code", bundle: R.hostingBundle, value: "Enter your promo code", comment: "")
      }
      
      /// Base translation: Equipment
      /// 
      /// Locales: Base, ru, en
      static func equipment(_: Void = ()) -> String {
        return NSLocalizedString("Equipment", bundle: R.hostingBundle, value: "Equipment", comment: "")
      }
      
      /// Base translation: Error
      /// 
      /// Locales: Base, ru, en
      static func error(_: Void = ()) -> String {
        return NSLocalizedString("Error", bundle: R.hostingBundle, value: "Error", comment: "")
      }
      
      /// Base translation: Error
      /// 
      /// Locales: Base, ru, en
      static func internetErrorTitle(_: Void = ()) -> String {
        return NSLocalizedString("InternetErrorTitle", bundle: R.hostingBundle, value: "Error", comment: "")
      }
      
      /// Base translation: Error
      /// 
      /// Locales: Base, ru, en
      static func loginErrorTitle(_: Void = ()) -> String {
        return NSLocalizedString("LoginErrorTitle", bundle: R.hostingBundle, value: "Error", comment: "")
      }
      
      /// Base translation: Error
      /// 
      /// Locales: Base, ru, en
      static func taskErrorTitle(_: Void = ()) -> String {
        return NSLocalizedString("TaskErrorTitle", bundle: R.hostingBundle, value: "Error", comment: "")
      }
      
      /// Base translation: Error of  order transfer
      /// 
      /// Locales: Base, ru, en
      static func subject2(_: Void = ()) -> String {
        return NSLocalizedString("Subject 2", bundle: R.hostingBundle, value: "Error of  order transfer", comment: "")
      }
      
      /// Base translation: Error of app usability
      /// 
      /// Locales: Base, ru, en
      static func subject1(_: Void = ()) -> String {
        return NSLocalizedString("Subject 1", bundle: R.hostingBundle, value: "Error of app usability", comment: "")
      }
      
      /// Base translation: Error of order execution
      /// 
      /// Locales: Base, ru, en
      static func subject3(_: Void = ()) -> String {
        return NSLocalizedString("Subject 3", bundle: R.hostingBundle, value: "Error of order execution", comment: "")
      }
      
      /// Base translation: Events
      /// 
      /// Locales: Base, ru, en
      static func events(_: Void = ()) -> String {
        return NSLocalizedString("Events", bundle: R.hostingBundle, value: "Events", comment: "")
      }
      
      /// Base translation: Facebook
      /// 
      /// Locales: Base, ru, en
      static func facebook(_: Void = ()) -> String {
        return NSLocalizedString("Facebook", bundle: R.hostingBundle, value: "Facebook", comment: "")
      }
      
      /// Base translation: Feedback
      /// 
      /// Locales: Base, ru, en
      static func feedback(_: Void = ()) -> String {
        return NSLocalizedString("Feedback", bundle: R.hostingBundle, value: "Feedback", comment: "")
      }
      
      /// Base translation: Field of the order
      /// 
      /// Locales: Base, ru, en
      static func fieldOfTheOrder(_: Void = ()) -> String {
        return NSLocalizedString("Field of the order", bundle: R.hostingBundle, value: "Field of the order", comment: "")
      }
      
      /// Base translation: Fill out the fields of order to be verified
      /// 
      /// Locales: Base, ru, en
      static func fillOutTheFieldsOfOrderToBeVerified(_: Void = ()) -> String {
        return NSLocalizedString("Fill out the fields of order to be verified", bundle: R.hostingBundle, value: "Fill out the fields of order to be verified", comment: "")
      }
      
      /// Base translation: Fill this field..
      /// 
      /// Locales: Base, ru, en
      static func fillThisField(_: Void = ()) -> String {
        return NSLocalizedString("Fill this field...", bundle: R.hostingBundle, value: "Fill this field..", comment: "")
      }
      
      /// Base translation: Filters
      /// 
      /// Locales: Base, ru, en
      static func filters(_: Void = ()) -> String {
        return NSLocalizedString("Filters", bundle: R.hostingBundle, value: "Filters", comment: "")
      }
      
      /// Base translation: First Name
      /// 
      /// Locales: Base, ru, en
      static func firstName(_: Void = ()) -> String {
        return NSLocalizedString("First name", bundle: R.hostingBundle, value: "First Name", comment: "")
      }
      
      /// Base translation: Forgot your data?
      /// 
      /// Locales: Base, ru, en
      static func fogotPassword(_: Void = ()) -> String {
        return NSLocalizedString("Fogot Password", bundle: R.hostingBundle, value: "Forgot your data?", comment: "")
      }
      
      /// Base translation: Formulate the order fields
      /// 
      /// Locales: Base, ru, en
      static func formulateTheOrderFields(_: Void = ()) -> String {
        return NSLocalizedString("Formulate the order fields", bundle: R.hostingBundle, value: "Formulate the order fields", comment: "")
      }
      
      /// Base translation: From
      /// 
      /// Locales: Base, ru, en
      static func from(_: Void = ()) -> String {
        return NSLocalizedString("From", bundle: R.hostingBundle, value: "From", comment: "")
      }
      
      /// Base translation: Hash
      /// 
      /// Locales: Base, ru, en
      static func hash(_: Void = ()) -> String {
        return NSLocalizedString("Hash", bundle: R.hostingBundle, value: "Hash", comment: "")
      }
      
      /// Base translation: Help with sing in.
      /// 
      /// Locales: Base, ru, en
      static func helpWithSingIn(_: Void = ()) -> String {
        return NSLocalizedString("Help with sing in", bundle: R.hostingBundle, value: "Help with sing in.", comment: "")
      }
      
      /// Base translation: House
      /// 
      /// Locales: Base, ru, en
      static func house(_: Void = ()) -> String {
        return NSLocalizedString("House", bundle: R.hostingBundle, value: "House", comment: "")
      }
      
      /// Base translation: ID data
      /// 
      /// Locales: Base, ru, en
      static func idData(_: Void = ()) -> String {
        return NSLocalizedString("ID data", bundle: R.hostingBundle, value: "ID data", comment: "")
      }
      
      /// Base translation: If you have QR code,   scan it to enter applications
      /// 
      /// Locales: Base, ru, en
      static func qrEnter(_: Void = ()) -> String {
        return NSLocalizedString("QR enter", bundle: R.hostingBundle, value: "If you have QR code, \n scan it to enter applications", comment: "")
      }
      
      /// Base translation: If you have promo code, please enter
      /// 
      /// Locales: Base, ru, en
      static func ifYouHavePromoCodePleaseEnter(_: Void = ()) -> String {
        return NSLocalizedString("If you have promo code, please enter", bundle: R.hostingBundle, value: "If you have promo code, please enter", comment: "")
      }
      
      /// Base translation: If you liked the app, share it with friends via the link
      /// 
      /// Locales: Base, ru, en
      static func ifYouLikedTheAppShareItWithFriendsViaTheLink(_: Void = ()) -> String {
        return NSLocalizedString("If you liked the app, share it with friends via the link", bundle: R.hostingBundle, value: "If you liked the app, share it with friends via the link", comment: "")
      }
      
      /// Base translation: If you liked the application, please, share it with your friends with a reference link.
      /// 
      /// Locales: Base, ru, en
      static func ifYouLikedTheApplicationPleaseShareItWithYourFriendsWithAReferenceLink(_: Void = ()) -> String {
        return NSLocalizedString("If you liked the application, please, share it with your friends with a reference link.", bundle: R.hostingBundle, value: "If you liked the application, please, share it with your friends with a reference link.", comment: "")
      }
      
      /// Base translation: In work
      /// 
      /// Locales: Base, ru, en
      static func inWork(_: Void = ()) -> String {
        return NSLocalizedString("In work", bundle: R.hostingBundle, value: "In work", comment: "")
      }
      
      /// Base translation: Incorrect QR-code
      /// 
      /// Locales: Base, ru, en
      static func errorIncorrectQrCode(_: Void = ()) -> String {
        return NSLocalizedString("Error incorrect qr code", bundle: R.hostingBundle, value: "Incorrect QR-code", comment: "")
      }
      
      /// Base translation: Incorrect login or password
      /// 
      /// Locales: Base, ru, en
      static func loginErrorDescription(_: Void = ()) -> String {
        return NSLocalizedString("LoginErrorDescription", bundle: R.hostingBundle, value: "Incorrect login or password", comment: "")
      }
      
      /// Base translation: Individul
      /// 
      /// Locales: Base, ru, en
      static func individual(_: Void = ()) -> String {
        return NSLocalizedString("Individual", bundle: R.hostingBundle, value: "Individul", comment: "")
      }
      
      /// Base translation: Items in Shop
      /// 
      /// Locales: Base, ru, en
      static func itemsInShop(_: Void = ()) -> String {
        return NSLocalizedString("Items in Shop", bundle: R.hostingBundle, value: "Items in Shop", comment: "")
      }
      
      /// Base translation: Last Name
      /// 
      /// Locales: Base, ru, en
      static func lastName(_: Void = ()) -> String {
        return NSLocalizedString("Last name", bundle: R.hostingBundle, value: "Last Name", comment: "")
      }
      
      /// Base translation: Log Out
      /// 
      /// Locales: Base, ru, en
      static func logOut(_: Void = ()) -> String {
        return NSLocalizedString("Log Out", bundle: R.hostingBundle, value: "Log Out", comment: "")
      }
      
      /// Base translation: Login
      /// 
      /// Locales: Base, ru, en
      static func login(_: Void = ()) -> String {
        return NSLocalizedString("Login", bundle: R.hostingBundle, value: "Login", comment: "")
      }
      
      /// Base translation: Login via
      /// 
      /// Locales: Base, ru, en
      static func loginVia(_: Void = ()) -> String {
        return NSLocalizedString("Login via", bundle: R.hostingBundle, value: "Login via", comment: "")
      }
      
      /// Base translation: MORE OF THE WEBSITE
      /// 
      /// Locales: Base, ru, en
      static func moreofthewebsitE(_: Void = ()) -> String {
        return NSLocalizedString("MORE OF THE WEBSITE", bundle: R.hostingBundle, value: "MORE OF THE WEBSITE", comment: "")
      }
      
      /// Base translation: Map a route
      /// 
      /// Locales: Base, ru, en
      static func mapARoute(_: Void = ()) -> String {
        return NSLocalizedString("Map a route", bundle: R.hostingBundle, value: "Map a route", comment: "")
      }
      
      /// Base translation: Menu
      /// 
      /// Locales: Base, ru, en
      static func menu(_: Void = ()) -> String {
        return NSLocalizedString("Menu", bundle: R.hostingBundle, value: "Menu", comment: "")
      }
      
      /// Base translation: Middle Name
      /// 
      /// Locales: Base, ru, en
      static func middleName(_: Void = ()) -> String {
        return NSLocalizedString("Middle name", bundle: R.hostingBundle, value: "Middle Name", comment: "")
      }
      
      /// Base translation: My Account
      /// 
      /// Locales: Base, ru, en
      static func myAccount(_: Void = ()) -> String {
        return NSLocalizedString("My Account", bundle: R.hostingBundle, value: "My Account", comment: "")
      }
      
      /// Base translation: My Orders
      /// 
      /// Locales: Base, ru, en
      static func myOrders(_: Void = ()) -> String {
        return NSLocalizedString("My Orders", bundle: R.hostingBundle, value: "My Orders", comment: "")
      }
      
      /// Base translation: Name
      /// 
      /// Locales: Base, ru, en
      static func name(_: Void = ()) -> String {
        return NSLocalizedString("Name", bundle: R.hostingBundle, value: "Name", comment: "")
      }
      
      /// Base translation: Name of the Order
      /// 
      /// Locales: Base, ru, en
      static func nameOfTheOrder(_: Void = ()) -> String {
        return NSLocalizedString("Name of the Order", bundle: R.hostingBundle, value: "Name of the Order", comment: "")
      }
      
      /// Base translation: Name of the Order
      /// 
      /// Locales: Base, ru, en
      static func orderName(_: Void = ()) -> String {
        return NSLocalizedString("Order name", bundle: R.hostingBundle, value: "Name of the Order", comment: "")
      }
      
      /// Base translation: Name of the field
      /// 
      /// Locales: Base, ru, en
      static func nameOfTheField(_: Void = ()) -> String {
        return NSLocalizedString("Name of the field", bundle: R.hostingBundle, value: "Name of the field", comment: "")
      }
      
      /// Base translation: Nationality
      /// 
      /// Locales: Base, ru, en
      static func nationality(_: Void = ()) -> String {
        return NSLocalizedString("Nationality", bundle: R.hostingBundle, value: "Nationality", comment: "")
      }
      
      /// Base translation: Need to fill all fields
      /// 
      /// Locales: Base, ru, en
      static func errorFillAllFields(_: Void = ()) -> String {
        return NSLocalizedString("Error fill all fields", bundle: R.hostingBundle, value: "Need to fill all fields", comment: "")
      }
      
      /// Base translation: New verifier
      /// 
      /// Locales: Base, ru, en
      static func newVerifier(_: Void = ()) -> String {
        return NSLocalizedString("New verifier", bundle: R.hostingBundle, value: "New verifier", comment: "")
      }
      
      /// Base translation: Next
      /// 
      /// Locales: Base, ru, en
      static func next(_: Void = ()) -> String {
        return NSLocalizedString("Next", bundle: R.hostingBundle, value: "Next", comment: "")
      }
      
      /// Base translation: No tasks
      /// 
      /// Locales: Base, ru, en
      static func noTasks(_: Void = ()) -> String {
        return NSLocalizedString("No tasks", bundle: R.hostingBundle, value: "No tasks", comment: "")
      }
      
      /// Base translation: No tasks
      /// 
      /// Locales: Base, ru, en
      static func noTasksDone(_: Void = ()) -> String {
        return NSLocalizedString("No tasks done", bundle: R.hostingBundle, value: "No tasks", comment: "")
      }
      
      /// Base translation: Office
      /// 
      /// Locales: Base, ru, en
      static func office(_: Void = ()) -> String {
        return NSLocalizedString("Office", bundle: R.hostingBundle, value: "Office", comment: "")
      }
      
      /// Base translation: Online purchases
      /// 
      /// Locales: Base, ru, en
      static func onlinePurchases(_: Void = ()) -> String {
        return NSLocalizedString("Online purchases", bundle: R.hostingBundle, value: "Online purchases", comment: "")
      }
      
      /// Base translation: Order fields
      /// 
      /// Locales: Base, ru, en
      static func orderFields(_: Void = ()) -> String {
        return NSLocalizedString("Order fields", bundle: R.hostingBundle, value: "Order fields", comment: "")
      }
      
      /// Base translation: Order topic
      /// 
      /// Locales: Base, ru, en
      static func subjectOfOrder(_: Void = ()) -> String {
        return NSLocalizedString("Subject of order", bundle: R.hostingBundle, value: "Order topic", comment: "")
      }
      
      /// Base translation: Orders to be verified
      /// 
      /// Locales: Base, ru, en
      static func ordersToBeVerified(_: Void = ()) -> String {
        return NSLocalizedString("Orders to be verified", bundle: R.hostingBundle, value: "Orders to be verified", comment: "")
      }
      
      /// Base translation: Others
      /// 
      /// Locales: Base, ru, en
      static func others(_: Void = ()) -> String {
        return NSLocalizedString("Others", bundle: R.hostingBundle, value: "Others", comment: "")
      }
      
      /// Base translation: Passport issue
      /// 
      /// Locales: Base, ru, en
      static func passportIssue(_: Void = ()) -> String {
        return NSLocalizedString("Passport issue", bundle: R.hostingBundle, value: "Passport issue", comment: "")
      }
      
      /// Base translation: Passport issue code
      /// 
      /// Locales: Base, ru, en
      static func passportIssueCode(_: Void = ()) -> String {
        return NSLocalizedString("Passport issue code", bundle: R.hostingBundle, value: "Passport issue code", comment: "")
      }
      
      /// Base translation: Passport issue date
      /// 
      /// Locales: Base, ru, en
      static func passportIssueDate(_: Void = ()) -> String {
        return NSLocalizedString("Passport issue date", bundle: R.hostingBundle, value: "Passport issue date", comment: "")
      }
      
      /// Base translation: Passport number
      /// 
      /// Locales: Base, ru, en
      static func passportNumber(_: Void = ()) -> String {
        return NSLocalizedString("Passport number", bundle: R.hostingBundle, value: "Passport number", comment: "")
      }
      
      /// Base translation: Passport series
      /// 
      /// Locales: Base, ru, en
      static func passportSeries(_: Void = ()) -> String {
        return NSLocalizedString("Passport series", bundle: R.hostingBundle, value: "Passport series", comment: "")
      }
      
      /// Base translation: Password
      /// 
      /// Locales: Base, ru, en
      static func password(_: Void = ()) -> String {
        return NSLocalizedString("Password", bundle: R.hostingBundle, value: "Password", comment: "")
      }
      
      /// Base translation: Personal Estate
      /// 
      /// Locales: Base, ru, en
      static func personalEstate(_: Void = ()) -> String {
        return NSLocalizedString("Personal Estate", bundle: R.hostingBundle, value: "Personal Estate", comment: "")
      }
      
      /// Base translation: Personal data
      /// 
      /// Locales: Base, ru, en
      static func personalData(_: Void = ()) -> String {
        return NSLocalizedString("Personal data", bundle: R.hostingBundle, value: "Personal data", comment: "")
      }
      
      /// Base translation: Personalize your Verifier account by uploading your photo
      /// 
      /// Locales: Base, ru, en
      static func uploadingPhoto(_: Void = ()) -> String {
        return NSLocalizedString("Uploading photo", bundle: R.hostingBundle, value: "Personalize your Verifier account by uploading your photo", comment: "")
      }
      
      /// Base translation: Phone
      /// 
      /// Locales: Base, ru, en
      static func phone(_: Void = ()) -> String {
        return NSLocalizedString("Phone", bundle: R.hostingBundle, value: "Phone", comment: "")
      }
      
      /// Base translation: Please add photo
      /// 
      /// Locales: Base, ru, en
      static func add_photo(_: Void = ()) -> String {
        return NSLocalizedString("add_photo", bundle: R.hostingBundle, value: "Please add photo", comment: "")
      }
      
      /// Base translation: Please check your internet connection and try again.
      /// 
      /// Locales: Base, ru, en
      static func internetErrorMessage(_: Void = ()) -> String {
        return NSLocalizedString("InternetErrorMessage", bundle: R.hostingBundle, value: "Please check your internet connection and try again.", comment: "")
      }
      
      /// Base translation: Please enter 8 symbols
      /// 
      /// Locales: Base, ru, en
      static func pleaseEnter8Symbols(_: Void = ()) -> String {
        return NSLocalizedString("Please enter 8 symbols", bundle: R.hostingBundle, value: "Please enter 8 symbols", comment: "")
      }
      
      /// Base translation: Please, enter the reason of return
      /// 
      /// Locales: Base, ru, en
      static func pleaseEnterTheReasonOfReturn(_: Void = ()) -> String {
        return NSLocalizedString("Please, enter the reason of return", bundle: R.hostingBundle, value: "Please, enter the reason of return", comment: "")
      }
      
      /// Base translation: Profile
      /// 
      /// Locales: Base, ru, en
      static func profile(_: Void = ()) -> String {
        return NSLocalizedString("Profile", bundle: R.hostingBundle, value: "Profile", comment: "")
      }
      
      /// Base translation: Promo is empty. Do you want to continue?
      /// 
      /// Locales: Base, ru, en
      static func promoIsEmptyDoYouWantToContinue(_: Void = ()) -> String {
        return NSLocalizedString("Promo is empty. Do you want to continue?", bundle: R.hostingBundle, value: "Promo is empty. Do you want to continue?", comment: "")
      }
      
      /// Base translation: Promo isn't correct
      /// 
      /// Locales: Base, ru, en
      static func promoIsnTCorrect(_: Void = ()) -> String {
        return NSLocalizedString("Promo isn't correct", bundle: R.hostingBundle, value: "Promo isn't correct", comment: "")
      }
      
      /// Base translation: Put a mark on the map or enter the address, around which you'd like to view the orders
      /// 
      /// Locales: Base, ru, en
      static func mapFilter(_: Void = ()) -> String {
        return NSLocalizedString("Map filter", bundle: R.hostingBundle, value: "Put a mark on the map or enter the address, around which you'd like to view the orders", comment: "")
      }
      
      /// Base translation: QR-code
      /// 
      /// Locales: Base, ru, en
      static func qrCode(_: Void = ()) -> String {
        return NSLocalizedString("QR-code", bundle: R.hostingBundle, value: "QR-code", comment: "")
      }
      
      /// Base translation: Range of order execution
      /// 
      /// Locales: Base, ru, en
      static func rangeOfOrderExecution(_: Void = ()) -> String {
        return NSLocalizedString("Range of order execution", bundle: R.hostingBundle, value: "Range of order execution", comment: "")
      }
      
      /// Base translation: Ready
      /// 
      /// Locales: Base, ru, en
      static func ready(_: Void = ()) -> String {
        return NSLocalizedString("Ready", bundle: R.hostingBundle, value: "Ready", comment: "")
      }
      
      /// Base translation: Real Estate
      /// 
      /// Locales: Base, ru, en
      static func realEstate(_: Void = ()) -> String {
        return NSLocalizedString("Real Estate", bundle: R.hostingBundle, value: "Real Estate", comment: "")
      }
      
      /// Base translation: Record a Video
      /// 
      /// Locales: Base, ru, en
      static func recordAVideo(_: Void = ()) -> String {
        return NSLocalizedString("Record a Video", bundle: R.hostingBundle, value: "Record a Video", comment: "")
      }
      
      /// Base translation: Region
      /// 
      /// Locales: Base, ru, en
      static func region(_: Void = ()) -> String {
        return NSLocalizedString("Region", bundle: R.hostingBundle, value: "Region", comment: "")
      }
      
      /// Base translation: Registration
      /// 
      /// Locales: Base, ru, en
      static func registration(_: Void = ()) -> String {
        return NSLocalizedString("Registration", bundle: R.hostingBundle, value: "Registration", comment: "")
      }
      
      /// Base translation: Remove photo
      /// 
      /// Locales: Base, ru, en
      static func removePhoto(_: Void = ()) -> String {
        return NSLocalizedString("Remove photo", bundle: R.hostingBundle, value: "Remove photo", comment: "")
      }
      
      /// Base translation: Repeat password
      /// 
      /// Locales: Base, en
      static func repeatPassword(_: Void = ()) -> String {
        return NSLocalizedString("Repeat password", bundle: R.hostingBundle, value: "Repeat password", comment: "")
      }
      
      /// Base translation: SEND
      /// 
      /// Locales: Base, ru, en
      static func senD(_: Void = ()) -> String {
        return NSLocalizedString("SEND", bundle: R.hostingBundle, value: "SEND", comment: "")
      }
      
      /// Base translation: START
      /// 
      /// Locales: Base, ru, en
      static func starT(_: Void = ()) -> String {
        return NSLocalizedString("START", bundle: R.hostingBundle, value: "START", comment: "")
      }
      
      /// Base translation: Save
      /// 
      /// Locales: Base, ru, en
      static func save(_: Void = ()) -> String {
        return NSLocalizedString("Save", bundle: R.hostingBundle, value: "Save", comment: "")
      }
      
      /// Base translation: Save the order
      /// 
      /// Locales: Base, ru, en
      static func saveTheOrder(_: Void = ()) -> String {
        return NSLocalizedString("Save the order", bundle: R.hostingBundle, value: "Save the order", comment: "")
      }
      
      /// Base translation: Scan
      /// 
      /// Locales: Base, ru, en
      static func scan(_: Void = ()) -> String {
        return NSLocalizedString("Scan", bundle: R.hostingBundle, value: "Scan", comment: "")
      }
      
      /// Base translation: Select additional means your order to be confirmed
      /// 
      /// Locales: Base, ru, en
      static func selectAdditionalMeansYourOrderToBeConfirmed(_: Void = ()) -> String {
        return NSLocalizedString("Select additional means your order to be confirmed", bundle: R.hostingBundle, value: "Select additional means your order to be confirmed", comment: "")
      }
      
      /// Base translation: Select the language
      /// 
      /// Locales: Base, ru, en
      static func selectTheLanguage(_: Void = ()) -> String {
        return NSLocalizedString("Select the language", bundle: R.hostingBundle, value: "Select the language", comment: "")
      }
      
      /// Base translation: Select the number of photos
      /// 
      /// Locales: Base, ru, en
      static func selectTheNumberOfPhotos(_: Void = ()) -> String {
        return NSLocalizedString("Select the number of photos", bundle: R.hostingBundle, value: "Select the number of photos", comment: "")
      }
      
      /// Base translation: Select the period within which you'd like to view the orders
      /// 
      /// Locales: Base, ru, en
      static func period(_: Void = ()) -> String {
        return NSLocalizedString("Period", bundle: R.hostingBundle, value: "Select the period within which you'd like to view the orders", comment: "")
      }
      
      /// Base translation: Select the period within which you'd like to view the orders
      /// 
      /// Locales: Base, ru, en
      static func selectThePeriodWithinWhichYouDLikeToViewTheOrders(_: Void = ()) -> String {
        return NSLocalizedString("Select the period within which you'd like to view the orders", bundle: R.hostingBundle, value: "Select the period within which you'd like to view the orders", comment: "")
      }
      
      /// Base translation: Select the radius on the map and enter the address, around which you'd like to view the orders
      /// 
      /// Locales: Base, ru, en
      static func radiusFilter(_: Void = ()) -> String {
        return NSLocalizedString("Radius filter", bundle: R.hostingBundle, value: "Select the radius on the map and enter the address, around which you'd like to view the orders", comment: "")
      }
      
      /// Base translation: Settings
      /// 
      /// Locales: Base, ru, en
      static func settings(_: Void = ()) -> String {
        return NSLocalizedString("Settings", bundle: R.hostingBundle, value: "Settings", comment: "")
      }
      
      /// Base translation: Settings
      /// 
      /// Locales: Base, ru, en
      static func settingsNav(_: Void = ()) -> String {
        return NSLocalizedString("Settings nav", bundle: R.hostingBundle, value: "Settings", comment: "")
      }
      
      /// Base translation: Share the application
      /// 
      /// Locales: Base, ru, en
      static func shareTheApplication(_: Void = ()) -> String {
        return NSLocalizedString("Share the application", bundle: R.hostingBundle, value: "Share the application", comment: "")
      }
      
      /// Base translation: Share your promocode with your friend to get bonus tokens
      /// 
      /// Locales: Base, ru, en
      static func shareYourPromocodeWithYourFriendToGetBonusTokens(_: Void = ()) -> String {
        return NSLocalizedString("Share your promocode with your friend to get bonus tokens", bundle: R.hostingBundle, value: "Share your promocode with your friend to get bonus tokens", comment: "")
      }
      
      /// Base translation: Sign Up.
      /// 
      /// Locales: Base, ru, en
      static func signUp(_: Void = ()) -> String {
        return NSLocalizedString("Sign Up", bundle: R.hostingBundle, value: "Sign Up.", comment: "")
      }
      
      /// Base translation: Sign up to find out maximum features of the application Verifire
      /// 
      /// Locales: Base, ru, en
      static func registrationInfo(_: Void = ()) -> String {
        return NSLocalizedString("Registration Info", bundle: R.hostingBundle, value: "Sign up to find out maximum features of the application Verifire", comment: "")
      }
      
      /// Base translation: Specialization
      /// 
      /// Locales: Base, ru, en
      static func specialization(_: Void = ()) -> String {
        return NSLocalizedString("Specialization", bundle: R.hostingBundle, value: "Specialization", comment: "")
      }
      
      /// Base translation: Stage 1
      /// 
      /// Locales: Base, ru, en
      static func step1(_: Void = ()) -> String {
        return NSLocalizedString("Step 1", bundle: R.hostingBundle, value: "Stage 1", comment: "")
      }
      
      /// Base translation: Stage 2
      /// 
      /// Locales: Base, ru, en
      static func step2(_: Void = ()) -> String {
        return NSLocalizedString("Step 2", bundle: R.hostingBundle, value: "Stage 2", comment: "")
      }
      
      /// Base translation: Street
      /// 
      /// Locales: Base, ru, en
      static func street(_: Void = ()) -> String {
        return NSLocalizedString("Street", bundle: R.hostingBundle, value: "Street", comment: "")
      }
      
      /// Base translation: Subject of your message
      /// 
      /// Locales: Base, ru, en
      static func subjectOfYourMessage(_: Void = ()) -> String {
        return NSLocalizedString("Subject of your message", bundle: R.hostingBundle, value: "Subject of your message", comment: "")
      }
      
      /// Base translation: Take a Photo
      /// 
      /// Locales: Base, ru, en
      static func takeAPhoto(_: Void = ()) -> String {
        return NSLocalizedString("Take a Photo", bundle: R.hostingBundle, value: "Take a Photo", comment: "")
      }
      
      /// Base translation: Task is Done! Wait for customer approval!
      /// 
      /// Locales: Base, ru, en
      static func alertTaskIsDone(_: Void = ()) -> String {
        return NSLocalizedString("AlertTaskIsDone", bundle: R.hostingBundle, value: "Task is Done! Wait for customer approval!", comment: "")
      }
      
      /// Base translation: Task is Done! Wait for customer approval!
      /// 
      /// Locales: Base, ru, en
      static func titlePopUp(_: Void = ()) -> String {
        return NSLocalizedString("TitlePopUp", bundle: R.hostingBundle, value: "Task is Done!\nWait for customer approval!", comment: "")
      }
      
      /// Base translation: Tasks
      /// 
      /// Locales: Base, ru, en
      static func tasks(_: Void = ()) -> String {
        return NSLocalizedString("Tasks", bundle: R.hostingBundle, value: "Tasks", comment: "")
      }
      
      /// Base translation: Thank you for your feedback
      /// 
      /// Locales: Base, ru, en
      static func thankYouForYourFeedback(_: Void = ()) -> String {
        return NSLocalizedString("Thank you for your feedback", bundle: R.hostingBundle, value: "Thank you for your feedback", comment: "")
      }
      
      /// Base translation: The size of a video should not be bigger than 50 MB.
      /// 
      /// Locales: Base, ru, en
      static func theSizeOfAVideoShouldNotBeBiggerThan50MB(_: Void = ()) -> String {
        return NSLocalizedString("The size of a video should not be bigger than 50 MB.", bundle: R.hostingBundle, value: "The size of a video should not be bigger than 50 MB.", comment: "")
      }
      
      /// Base translation: Through
      /// 
      /// Locales: Base, ru, en
      static func through(_: Void = ()) -> String {
        return NSLocalizedString("through", bundle: R.hostingBundle, value: "Through", comment: "")
      }
      
      /// Base translation: Time
      /// 
      /// Locales: Base, ru, en
      static func time(_: Void = ()) -> String {
        return NSLocalizedString("Time", bundle: R.hostingBundle, value: "Time", comment: "")
      }
      
      /// Base translation: To
      /// 
      /// Locales: Base, ru, en
      static func to(_: Void = ()) -> String {
        return NSLocalizedString("To", bundle: R.hostingBundle, value: "To", comment: "")
      }
      
      /// Base translation: Today
      /// 
      /// Locales: Base, ru, en
      static func today(_: Void = ()) -> String {
        return NSLocalizedString("Today", bundle: R.hostingBundle, value: "Today", comment: "")
      }
      
      /// Base translation: Tomorrow
      /// 
      /// Locales: Base, ru, en
      static func tomorrow(_: Void = ()) -> String {
        return NSLocalizedString("Tomorrow", bundle: R.hostingBundle, value: "Tomorrow", comment: "")
      }
      
      /// Base translation: Twitter
      /// 
      /// Locales: Base, ru, en
      static func twitter(_: Void = ()) -> String {
        return NSLocalizedString("Twitter", bundle: R.hostingBundle, value: "Twitter", comment: "")
      }
      
      /// Base translation: Type of the order
      /// 
      /// Locales: Base, ru, en
      static func typeOfTheOrder(_: Void = ()) -> String {
        return NSLocalizedString("Type of the order", bundle: R.hostingBundle, value: "Type of the order", comment: "")
      }
      
      /// Base translation: Verification of Individual
      /// 
      /// Locales: Base, ru, en
      static func switchLabel(_: Void = ()) -> String {
        return NSLocalizedString("Switch label", bundle: R.hostingBundle, value: "Verification of Individual", comment: "")
      }
      
      /// Base translation: Verification of order
      /// 
      /// Locales: Base, ru, en
      static func verificationOfOrder(_: Void = ()) -> String {
        return NSLocalizedString("Verification of order", bundle: R.hostingBundle, value: "Verification of order", comment: "")
      }
      
      /// Base translation: Verify
      /// 
      /// Locales: Base, ru, en
      static func verify(_: Void = ()) -> String {
        return NSLocalizedString("Verify", bundle: R.hostingBundle, value: "Verify", comment: "")
      }
      
      /// Base translation: View with a map
      /// 
      /// Locales: Base, ru, en
      static func viewWithAMap(_: Void = ()) -> String {
        return NSLocalizedString("View with a map", bundle: R.hostingBundle, value: "View with a map", comment: "")
      }
      
      /// Base translation: Wallet
      /// 
      /// Locales: Base, ru, en
      static func wallet(_: Void = ()) -> String {
        return NSLocalizedString("Wallet", bundle: R.hostingBundle, value: "Wallet", comment: "")
      }
      
      /// Base translation: Withdraw money
      /// 
      /// Locales: Base, ru, en
      static func withdrawMoney(_: Void = ()) -> String {
        return NSLocalizedString("Withdraw money", bundle: R.hostingBundle, value: "Withdraw money", comment: "")
      }
      
      /// Base translation: Within 1 month
      /// 
      /// Locales: Base, ru, en
      static func within1Month(_: Void = ()) -> String {
        return NSLocalizedString("Within 1 month", bundle: R.hostingBundle, value: "Within 1 month", comment: "")
      }
      
      /// Base translation: Within 1 week
      /// 
      /// Locales: Base, ru, en
      static func within1Week(_: Void = ()) -> String {
        return NSLocalizedString("Within 1 week", bundle: R.hostingBundle, value: "Within 1 week", comment: "")
      }
      
      /// Base translation: Work Place
      /// 
      /// Locales: Base, ru, en
      static func workPlace(_: Void = ()) -> String {
        return NSLocalizedString("Work Place", bundle: R.hostingBundle, value: "Work Place", comment: "")
      }
      
      /// Base translation: You are outside execution zone
      /// 
      /// Locales: Base, ru, en
      static func alertOrderVerifier(_: Void = ()) -> String {
        return NSLocalizedString("AlertOrderVerifier", bundle: R.hostingBundle, value: "You are outside execution zone", comment: "")
      }
      
      /// Base translation: You must fill out all the profile information
      /// 
      /// Locales: Base, ru, en
      static func verifyInfoError(_: Void = ()) -> String {
        return NSLocalizedString("Verify info error", bundle: R.hostingBundle, value: "You must fill out all the profile information", comment: "")
      }
      
      /// Base translation: Your E-Mail or ID
      /// 
      /// Locales: Base, ru, en
      static func yourEMailOrID(_: Void = ()) -> String {
        return NSLocalizedString("Your E-Mail or ID", bundle: R.hostingBundle, value: "Your E-Mail or ID", comment: "")
      }
      
      /// Base translation: Your Password
      /// 
      /// Locales: Base, ru, en
      static func yourPassword(_: Void = ()) -> String {
        return NSLocalizedString("Your Password", bundle: R.hostingBundle, value: "Your Password", comment: "")
      }
      
      /// Base translation: Your email is invalid.
      /// 
      /// Locales: Base, ru, en
      static func emailErrorMessage(_: Void = ()) -> String {
        return NSLocalizedString("EmailErrorMessage", bundle: R.hostingBundle, value: "Your email is invalid.", comment: "")
      }
      
      /// Base translation: Your passwords do not match.
      /// 
      /// Locales: Base, ru, en
      static func confirmAndPasswordErrorMessage(_: Void = ()) -> String {
        return NSLocalizedString("ConfirmAndPasswordErrorMessage", bundle: R.hostingBundle, value: "Your passwords do not match.", comment: "")
      }
      
      /// Base translation: Your personal info has been successfully changed
      /// 
      /// Locales: Base, ru, en
      static func successChangePersonalInfo(_: Void = ()) -> String {
        return NSLocalizedString("Success change personal info", bundle: R.hostingBundle, value: "Your personal info has been successfully changed", comment: "")
      }
      
      /// Base translation: Your promocode
      /// 
      /// Locales: Base, ru, en
      static func yourPromocode(_: Void = ()) -> String {
        return NSLocalizedString("Your promocode", bundle: R.hostingBundle, value: "Your promocode", comment: "")
      }
      
      /// Base translation: You’ve got
      /// 
      /// Locales: Base, ru, en
      static func youVeGot(_: Void = ()) -> String {
        return NSLocalizedString("You’ve got", bundle: R.hostingBundle, value: "You’ve got", comment: "")
      }
      
      /// Base translation: ZIP code
      /// 
      /// Locales: Base, ru, en
      static func zipCode(_: Void = ()) -> String {
        return NSLocalizedString("ZIP code", bundle: R.hostingBundle, value: "ZIP code", comment: "")
      }
      
      /// Base translation: dd.mm.yyyy
      /// 
      /// Locales: Base, ru, en
      static func ddMmYyyy(_: Void = ()) -> String {
        return NSLocalizedString("dd.mm.yyyy", bundle: R.hostingBundle, value: "dd.mm.yyyy", comment: "")
      }
      
      /// Base translation: en
      /// 
      /// Locales: Base, ru, en
      static func appLanguage(_: Void = ()) -> String {
        return NSLocalizedString("AppLanguage", bundle: R.hostingBundle, value: "en", comment: "")
      }
      
      /// Base translation: to Vote
      /// 
      /// Locales: Base, ru, en
      static func toVote(_: Void = ()) -> String {
        return NSLocalizedString("To Vote", bundle: R.hostingBundle, value: "to Vote", comment: "")
      }
      
      /// Base translation: тип адреса
      /// 
      /// Locales: Base, ru, en
      static func addressType(_: Void = ()) -> String {
        return NSLocalizedString("Address Type", bundle: R.hostingBundle, value: "тип адреса", comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _PreviewPhotoTableViewCell.validate()
      try _CreateTaskChooseFieldTableViewCell.validate()
      try _FieldOrderTextTableViewCell.validate()
      try _PhotoCollectionViewCell.validate()
      try _FilterContentTableViewCell.validate()
      try _FormulateOrderFieldsTableViewCell.validate()
      try _PreviewVideoTableViewCell.validate()
      try _OrderTextTableViewCell.validate()
      try _FieldOrderPhotoTableViewCell.validate()
      try _OrderInfoTableViewCell.validate()
      try _PreviewTextTableViewCell.validate()
      try _FilterRangeOfOrderExecutionViewCell.validate()
      try _OrderCheckTableViewCell.validate()
      try _FieldOrderVideoTableViewCell.validate()
      try _OrderMarkTableViewCell.validate()
      try _FilterRadiusTableViewCell.validate()
      try _VerifyCollectionViewCell.validate()
    }
    
    struct _AddressProfileCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = AddressProfileCollectionViewCell
      
      let bundle = R.hostingBundle
      let identifier = "AddressCell"
      let name = "AddressProfileCollectionViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> AddressProfileCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AddressProfileCollectionViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _CreateTaskChooseFieldTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = CreateTaskChooseFieldTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "CreateTaskChooseFieldTableViewCell"
      let name = "CreateTaskChooseFieldTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> CreateTaskChooseFieldTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CreateTaskChooseFieldTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "@photo_field_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named '@photo_field_icon' is used in nib 'CreateTaskChooseFieldTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "@text_field_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named '@text_field_icon' is used in nib 'CreateTaskChooseFieldTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "@video_field_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named '@video_field_icon' is used in nib 'CreateTaskChooseFieldTableViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _EmailCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = EmailCollectionViewCell
      
      let bundle = R.hostingBundle
      let identifier = "EmailCell"
      let name = "EmailCollectionViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> EmailCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EmailCollectionViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _FieldOrderPhotoTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = FieldOrderPhotoTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "FieldOrderPhotoTableViewCell"
      let name = "FieldOrderPhotoTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> FieldOrderPhotoTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FieldOrderPhotoTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "@text_field_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named '@text_field_icon' is used in nib 'FieldOrderPhotoTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "@delete_field_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named '@delete_field_icon' is used in nib 'FieldOrderPhotoTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "arrow_down_1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'arrow_down_1' is used in nib 'FieldOrderPhotoTableViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _FieldOrderTextTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = FieldOrderTextTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "FieldOrderTextTableViewCell"
      let name = "FieldOrderTextTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> FieldOrderTextTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FieldOrderTextTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "@text_field_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named '@text_field_icon' is used in nib 'FieldOrderTextTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "@delete_field_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named '@delete_field_icon' is used in nib 'FieldOrderTextTableViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _FieldOrderVideoTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = FieldOrderVideoTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "FieldOrderVideoTableViewCell"
      let name = "FieldOrderVideoTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> FieldOrderVideoTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FieldOrderVideoTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "@video_field_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named '@video_field_icon' is used in nib 'FieldOrderVideoTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "@delete_field_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named '@delete_field_icon' is used in nib 'FieldOrderVideoTableViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _FilterContentTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = FilterContentTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "FilterContentTableViewCell"
      let name = "FilterContentTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> FilterContentTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FilterContentTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "arrow_down_blue_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'arrow_down_blue_icon' is used in nib 'FilterContentTableViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _FilterMapTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = FilterMapTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "FilterMapTableViewCell"
      let name = "FilterMapTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> FilterMapTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FilterMapTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _FilterRadiusTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = FilterRadiusTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "FilterRadiusTableViewCell"
      let name = "FilterRadiusTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> FilterRadiusTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FilterRadiusTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "arrow_down_blue_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'arrow_down_blue_icon' is used in nib 'FilterRadiusTableViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _FilterRangeOfOrderExecutionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = FilterRangeOfOrderExecutionViewCell
      
      let bundle = R.hostingBundle
      let identifier = "FilterRangeOfOrderExecutionViewCell"
      let name = "FilterRangeOfOrderExecutionViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> FilterRangeOfOrderExecutionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FilterRangeOfOrderExecutionViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "arrow_down_blue_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'arrow_down_blue_icon' is used in nib 'FilterRangeOfOrderExecutionViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _FormulateOrderFieldsTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = FormulateOrderFieldsTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "FormulateOrderFieldsTableViewCell"
      let name = "FormulateOrderFieldsTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> FormulateOrderFieldsTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FormulateOrderFieldsTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "@add_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named '@add_icon' is used in nib 'FormulateOrderFieldsTableViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _IdDataCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = IdDataCollectionViewCell
      
      let bundle = R.hostingBundle
      let identifier = "IdDataCell"
      let name = "IdDataCollectionViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> IdDataCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? IdDataCollectionViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _OrderCheckTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = OrderCheckTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "OrderCheckTableViewCell"
      let name = "OrderCheckTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> OrderCheckTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OrderCheckTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "checkOff", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'checkOff' is used in nib 'OrderCheckTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "checkOn", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'checkOn' is used in nib 'OrderCheckTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Check.Icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Check.Icon' is used in nib 'OrderCheckTableViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _OrderDateTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = OrderDateTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "OrderDateTableViewCell"
      let name = "OrderDateTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> OrderDateTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OrderDateTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _OrderDescriptionTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = OrderDescriptionTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "OrderDescriptionTableViewCell"
      let name = "OrderDescriptionTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> OrderDescriptionTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OrderDescriptionTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _OrderFieldsTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = OrderFieldsTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "OrderFieldsTableViewCell"
      let name = "OrderFieldsTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> OrderFieldsTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OrderFieldsTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _OrderInfoTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = OrderInfoTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "OrderInfoTableViewCell"
      let name = "OrderInfoTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> OrderInfoTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OrderInfoTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "location_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'location_icon' is used in nib 'OrderInfoTableViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _OrderMapTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = OrderMapTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "OrderMapTableViewCell"
      let name = "OrderMapTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> OrderMapTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OrderMapTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _OrderMarkTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = OrderMarkTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "OrderMarkTableViewCell"
      let name = "OrderMarkTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> OrderMarkTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OrderMarkTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "AText.Icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'AText.Icon' is used in nib 'OrderMarkTableViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _OrderTextTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = OrderTextTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "OrderTextTableViewCell"
      let name = "OrderTextTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> OrderTextTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OrderTextTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "AText.Icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'AText.Icon' is used in nib 'OrderTextTableViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _PersonalProfileCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = PersonalProfileCollectionViewCell
      
      let bundle = R.hostingBundle
      let identifier = "PersonalCell"
      let name = "PersonalProfileCollectionViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> PersonalProfileCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PersonalProfileCollectionViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _PhotoCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = PhotoCollectionViewCell
      
      let bundle = R.hostingBundle
      let identifier = "PhotoCollectionViewCell"
      let name = "PhotoCollectionViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> PhotoCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PhotoCollectionViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icons8-instagram_new", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icons8-instagram_new' is used in nib 'PhotoCollectionViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _PreviewPhotoTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = PreviewPhotoTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "PreviewPhotoTableViewCell"
      let name = "PreviewPhotoTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> PreviewPhotoTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PreviewPhotoTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "Photo.Icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Photo.Icon' is used in nib 'PreviewPhotoTableViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _PreviewTextTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = PreviewTextTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "PreviewTextTableViewCell"
      let name = "PreviewTextTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> PreviewTextTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PreviewTextTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "AText.Icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'AText.Icon' is used in nib 'PreviewTextTableViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _PreviewVideoTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = PreviewVideoTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "PreviewVideoTableViewCell"
      let name = "PreviewVideoTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> PreviewVideoTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PreviewVideoTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "Video.Icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Video.Icon' is used in nib 'PreviewVideoTableViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _VerifyCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = VerifyCollectionViewCell
      
      let bundle = R.hostingBundle
      let identifier = "VerifyCell"
      let name = "VerifyCollectionViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> VerifyCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? VerifyCollectionViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "location_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'location_icon' is used in nib 'VerifyCollectionViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try promo.validate()
      try other.validate()
      try signUpStepTwo.validate()
      try alertError.validate()
      try menuHeader.validate()
      try emailVerification.validate()
      try createTaskStepTwo.validate()
      try task.validate()
      try signIn.validate()
      try launchScreen.validate()
      try menu.validate()
      try settings.validate()
      try signUp.validate()
      try qrCode.validate()
      try fogotPassword.validate()
      try filter.validate()
      try detail.validate()
      try jivoSite.validate()
      try map.validate()
      try profile.validate()
      try dashboard.validate()
    }
    
    struct alertError: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = AlertErrorViewController
      
      let alertErrorVC = StoryboardViewControllerResource<AlertErrorViewController>(identifier: "AlertErrorVC")
      let bundle = R.hostingBundle
      let name = "AlertError"
      
      func alertErrorVC(_: Void = ()) -> AlertErrorViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: alertErrorVC)
      }
      
      static func validate() throws {
        if _R.storyboard.alertError().alertErrorVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'alertErrorVC' could not be loaded from storyboard 'AlertError' as 'AlertErrorViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct createTaskStepTwo: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let createTaskTwo = StoryboardViewControllerResource<CreateTaskStepTwoViewController>(identifier: "CreateTaskTwo")
      let name = "CreateTaskStepTwo"
      
      func createTaskTwo(_: Void = ()) -> CreateTaskStepTwoViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: createTaskTwo)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "Combined Shape 2") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Combined Shape 2' is used in storyboard 'CreateTaskStepTwo', but couldn't be loaded.") }
        if UIKit.UIImage(named: "back_icon_white") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'back_icon_white' is used in storyboard 'CreateTaskStepTwo', but couldn't be loaded.") }
        if _R.storyboard.createTaskStepTwo().createTaskTwo() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'createTaskTwo' could not be loaded from storyboard 'CreateTaskStepTwo' as 'CreateTaskStepTwoViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct dashboard: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = DashboardNavigationViewController
      
      let bundle = R.hostingBundle
      let dashboardNAVVC = StoryboardViewControllerResource<DashboardNavigationViewController>(identifier: "DashboardNAVVC")
      let dashboardVC = StoryboardViewControllerResource<DashboardViewController>(identifier: "DashboardVC")
      let name = "Dashboard"
      
      func dashboardNAVVC(_: Void = ()) -> DashboardNavigationViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: dashboardNAVVC)
      }
      
      func dashboardVC(_: Void = ()) -> DashboardViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: dashboardVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "black_marker") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'black_marker' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "vrf_create.png") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'vrf_create.png' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "color_1") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'color_1' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Comb") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Comb' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "verifier_ava") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'verifier_ava' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "whiteMenuIcon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'whiteMenuIcon' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "@logout") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named '@logout' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Comb2") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Comb2' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Filter.Icon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Filter.Icon' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if _R.storyboard.dashboard().dashboardNAVVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'dashboardNAVVC' could not be loaded from storyboard 'Dashboard' as 'DashboardNavigationViewController'.") }
        if _R.storyboard.dashboard().dashboardVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'dashboardVC' could not be loaded from storyboard 'Dashboard' as 'DashboardViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct detail: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = DashboardDetailViewController
      
      let bundle = R.hostingBundle
      let dashboardDetailVC = StoryboardViewControllerResource<DashboardDetailViewController>(identifier: "DashboardDetailVC")
      let name = "Detail"
      
      func dashboardDetailVC(_: Void = ()) -> DashboardDetailViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: dashboardDetailVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "back_icon_black") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'back_icon_black' is used in storyboard 'Detail', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Comb2") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Comb2' is used in storyboard 'Detail', but couldn't be loaded.") }
        if UIKit.UIImage(named: "black_marker") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'black_marker' is used in storyboard 'Detail', but couldn't be loaded.") }
        if _R.storyboard.detail().dashboardDetailVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'dashboardDetailVC' could not be loaded from storyboard 'Detail' as 'DashboardDetailViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct emailVerification: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let emailVerificationVC = StoryboardViewControllerResource<EmailVerificationViewController>(identifier: "EmailVerificationVC")
      let name = "EmailVerification"
      
      func emailVerificationVC(_: Void = ()) -> EmailVerificationViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: emailVerificationVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "Email.Icon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Email.Icon' is used in storyboard 'EmailVerification', but couldn't be loaded.") }
        if UIKit.UIImage(named: "login_fon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'login_fon' is used in storyboard 'EmailVerification', but couldn't be loaded.") }
        if UIKit.UIImage(named: "logo_white") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo_white' is used in storyboard 'EmailVerification', but couldn't be loaded.") }
        if _R.storyboard.emailVerification().emailVerificationVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'emailVerificationVC' could not be loaded from storyboard 'EmailVerification' as 'EmailVerificationViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct filter: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let filterPickerVC = StoryboardViewControllerResource<FilterPickerViewController>(identifier: "FilterPickerVC")
      let filterPlaceListVC = StoryboardViewControllerResource<FilterPlaceListViewController>(identifier: "FilterPlaceListVC")
      let filterVC = StoryboardViewControllerResource<FiltersViewController>(identifier: "FilterVC")
      let name = "Filter"
      
      func filterPickerVC(_: Void = ()) -> FilterPickerViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: filterPickerVC)
      }
      
      func filterPlaceListVC(_: Void = ()) -> FilterPlaceListViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: filterPlaceListVC)
      }
      
      func filterVC(_: Void = ()) -> FiltersViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: filterVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "Combined Shape 2") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Combined Shape 2' is used in storyboard 'Filter', but couldn't be loaded.") }
        if UIKit.UIImage(named: "back_icon_white") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'back_icon_white' is used in storyboard 'Filter', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Filters") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Filters' is used in storyboard 'Filter', but couldn't be loaded.") }
        if UIKit.UIImage(named: "red_icon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'red_icon' is used in storyboard 'Filter', but couldn't be loaded.") }
        if UIKit.UIImage(named: "arrow_down_grey_icon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'arrow_down_grey_icon' is used in storyboard 'Filter', but couldn't be loaded.") }
        if _R.storyboard.filter().filterVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'filterVC' could not be loaded from storyboard 'Filter' as 'FiltersViewController'.") }
        if _R.storyboard.filter().filterPlaceListVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'filterPlaceListVC' could not be loaded from storyboard 'Filter' as 'FilterPlaceListViewController'.") }
        if _R.storyboard.filter().filterPickerVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'filterPickerVC' could not be loaded from storyboard 'Filter' as 'FilterPickerViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct fogotPassword: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let fogotPasswordVC = StoryboardViewControllerResource<FogotPasswordViewController>(identifier: "FogotPasswordVC")
      let name = "FogotPassword"
      
      func fogotPasswordVC(_: Void = ()) -> FogotPasswordViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: fogotPasswordVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "back_icon_white") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'back_icon_white' is used in storyboard 'FogotPassword', but couldn't be loaded.") }
        if UIKit.UIImage(named: "login_fon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'login_fon' is used in storyboard 'FogotPassword', but couldn't be loaded.") }
        if UIKit.UIImage(named: "logo_white") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo_white' is used in storyboard 'FogotPassword', but couldn't be loaded.") }
        if _R.storyboard.fogotPassword().fogotPasswordVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'fogotPasswordVC' could not be loaded from storyboard 'FogotPassword' as 'FogotPasswordViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct jivoSite: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let jivoSiteVC = StoryboardViewControllerResource<ChatViewController>(identifier: "JivoSiteVC")
      let name = "JivoSite"
      
      func jivoSiteVC(_: Void = ()) -> ChatViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: jivoSiteVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "Combined Shape 2") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Combined Shape 2' is used in storyboard 'JivoSite', but couldn't be loaded.") }
        if UIKit.UIImage(named: "back_icon_white") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'back_icon_white' is used in storyboard 'JivoSite', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Filters") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Filters' is used in storyboard 'JivoSite', but couldn't be loaded.") }
        if UIKit.UIImage(named: "greenMenuIcon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'greenMenuIcon' is used in storyboard 'JivoSite', but couldn't be loaded.") }
        if _R.storyboard.jivoSite().jivoSiteVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'jivoSiteVC' could not be loaded from storyboard 'JivoSite' as 'ChatViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if UIKit.UIImage(named: "@startScreenLogo") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named '@startScreenLogo' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if UIKit.UIImage(named: "@startScreenBackground") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named '@startScreenBackground' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct map: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let filterMapVC = StoryboardViewControllerResource<FilterMapViewController>(identifier: "FilterMapVC")
      let name = "Map"
      let taskMapVC = StoryboardViewControllerResource<TaskMapViewController>(identifier: "TaskMapVC")
      
      func filterMapVC(_: Void = ()) -> FilterMapViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: filterMapVC)
      }
      
      func taskMapVC(_: Void = ()) -> TaskMapViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: taskMapVC)
      }
      
      static func validate() throws {
        if _R.storyboard.map().taskMapVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'taskMapVC' could not be loaded from storyboard 'Map' as 'TaskMapViewController'.") }
        if _R.storyboard.map().filterMapVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'filterMapVC' could not be loaded from storyboard 'Map' as 'FilterMapViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct menu: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Menu"
      let rightSideMenuVC = StoryboardViewControllerResource<RightSideMenuViewController>(identifier: "RightSideMenuVC")
      let sideMenuVC = StoryboardViewControllerResource<SideMenuViewController>(identifier: "SideMenuVC")
      let templateVC = StoryboardViewControllerResource<TemplateViewController>(identifier: "TemplateVC")
      
      func rightSideMenuVC(_: Void = ()) -> RightSideMenuViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: rightSideMenuVC)
      }
      
      func sideMenuVC(_: Void = ()) -> SideMenuViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: sideMenuVC)
      }
      
      func templateVC(_: Void = ()) -> TemplateViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: templateVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "Comb2") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Comb2' is used in storyboard 'Menu', but couldn't be loaded.") }
        if UIKit.UIImage(named: "vrf_create.png") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'vrf_create.png' is used in storyboard 'Menu', but couldn't be loaded.") }
        if UIKit.UIImage(named: "color_1") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'color_1' is used in storyboard 'Menu', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Combined Shape") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Combined Shape' is used in storyboard 'Menu', but couldn't be loaded.") }
        if UIKit.UIImage(named: "greenMenuIcon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'greenMenuIcon' is used in storyboard 'Menu', but couldn't be loaded.") }
        if UIKit.UIImage(named: "black_marker") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'black_marker' is used in storyboard 'Menu', but couldn't be loaded.") }
        if UIKit.UIImage(named: "arrow_right_3") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'arrow_right_3' is used in storyboard 'Menu', but couldn't be loaded.") }
        if _R.storyboard.menu().templateVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'templateVC' could not be loaded from storyboard 'Menu' as 'TemplateViewController'.") }
        if _R.storyboard.menu().sideMenuVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'sideMenuVC' could not be loaded from storyboard 'Menu' as 'SideMenuViewController'.") }
        if _R.storyboard.menu().rightSideMenuVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'rightSideMenuVC' could not be loaded from storyboard 'Menu' as 'RightSideMenuViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct menuHeader: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let menuHeaderVC = StoryboardViewControllerResource<MenuHeaderViewController>(identifier: "MenuHeaderVC")
      let name = "MenuHeader"
      
      func menuHeaderVC(_: Void = ()) -> MenuHeaderViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: menuHeaderVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "Combined Shape 2") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Combined Shape 2' is used in storyboard 'MenuHeader', but couldn't be loaded.") }
        if UIKit.UIImage(named: "greenMenuIcon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'greenMenuIcon' is used in storyboard 'MenuHeader', but couldn't be loaded.") }
        if _R.storyboard.menuHeader().menuHeaderVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'menuHeaderVC' could not be loaded from storyboard 'MenuHeader' as 'MenuHeaderViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct other: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = PopUpWindowViewController
      
      let bundle = R.hostingBundle
      let datePickerVC = StoryboardViewControllerResource<DatePickerViewController>(identifier: "DatePickerVC")
      let name = "Other"
      let pickerVC = StoryboardViewControllerResource<PickerViewViewController>(identifier: "PickerVC")
      let popUpWindowVC = StoryboardViewControllerResource<PopUpWindowViewController>(identifier: "PopUpWindowVC")
      let verifierPickerVC = StoryboardViewControllerResource<VerifierPickerViewController>(identifier: "VerifierPickerVC")
      
      func datePickerVC(_: Void = ()) -> DatePickerViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: datePickerVC)
      }
      
      func pickerVC(_: Void = ()) -> PickerViewViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: pickerVC)
      }
      
      func popUpWindowVC(_: Void = ()) -> PopUpWindowViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: popUpWindowVC)
      }
      
      func verifierPickerVC(_: Void = ()) -> VerifierPickerViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: verifierPickerVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "checkmark") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'checkmark' is used in storyboard 'Other', but couldn't be loaded.") }
        if UIKit.UIImage(named: "facebook_icon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'facebook_icon' is used in storyboard 'Other', but couldn't be loaded.") }
        if UIKit.UIImage(named: "twitter_icon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'twitter_icon' is used in storyboard 'Other', but couldn't be loaded.") }
        if _R.storyboard.other().datePickerVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'datePickerVC' could not be loaded from storyboard 'Other' as 'DatePickerViewController'.") }
        if _R.storyboard.other().pickerVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'pickerVC' could not be loaded from storyboard 'Other' as 'PickerViewViewController'.") }
        if _R.storyboard.other().verifierPickerVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'verifierPickerVC' could not be loaded from storyboard 'Other' as 'VerifierPickerViewController'.") }
        if _R.storyboard.other().popUpWindowVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'popUpWindowVC' could not be loaded from storyboard 'Other' as 'PopUpWindowViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct profile: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = ProfileViewController
      
      let bundle = R.hostingBundle
      let name = "Profile"
      let profileVC = StoryboardViewControllerResource<ProfileViewController>(identifier: "ProfileVC")
      
      func profileVC(_: Void = ()) -> ProfileViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: profileVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "Combined ShapeSideMenu") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Combined ShapeSideMenu' is used in storyboard 'Profile', but couldn't be loaded.") }
        if UIKit.UIImage(named: "@ic_edit") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named '@ic_edit' is used in storyboard 'Profile', but couldn't be loaded.") }
        if UIKit.UIImage(named: "@ic_accept") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named '@ic_accept' is used in storyboard 'Profile', but couldn't be loaded.") }
        if UIKit.UIImage(named: "greenMenuIcon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'greenMenuIcon' is used in storyboard 'Profile', but couldn't be loaded.") }
        if UIKit.UIImage(named: "verifier_ava") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'verifier_ava' is used in storyboard 'Profile', but couldn't be loaded.") }
        if _R.storyboard.profile().profileVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'profileVC' could not be loaded from storyboard 'Profile' as 'ProfileViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct promo: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Promo"
      let promoVC = StoryboardViewControllerResource<PromoViewController>(identifier: "PromoVC")
      
      func promoVC(_: Void = ()) -> PromoViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: promoVC)
      }
      
      static func validate() throws {
        if _R.storyboard.promo().promoVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'promoVC' could not be loaded from storyboard 'Promo' as 'PromoViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct qrCode: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "QRCode"
      let qrCodeVC = StoryboardViewControllerResource<QRCodeViewController>(identifier: "QRCodeVC")
      
      func qrCodeVC(_: Void = ()) -> QRCodeViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: qrCodeVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "qr_border") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'qr_border' is used in storyboard 'QRCode', but couldn't be loaded.") }
        if UIKit.UIImage(named: "login_fon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'login_fon' is used in storyboard 'QRCode', but couldn't be loaded.") }
        if UIKit.UIImage(named: "logo_white") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo_white' is used in storyboard 'QRCode', but couldn't be loaded.") }
        if _R.storyboard.qrCode().qrCodeVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'qrCodeVC' could not be loaded from storyboard 'QRCode' as 'QRCodeViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct settings: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = SettingsViewController
      
      let bundle = R.hostingBundle
      let createTaskFirstStepVC = StoryboardViewControllerResource<CreateTaskFirstStepViewController>(identifier: "CreateTaskFirstStepVC")
      let createTaskPreviewVC = StoryboardViewControllerResource<CreateTaskPreviewViewController>(identifier: "CreateTaskPreviewVC")
      let name = "Settings"
      let settingsVC = StoryboardViewControllerResource<SettingsViewController>(identifier: "SettingsVC")
      
      func createTaskFirstStepVC(_: Void = ()) -> CreateTaskFirstStepViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: createTaskFirstStepVC)
      }
      
      func createTaskPreviewVC(_: Void = ()) -> CreateTaskPreviewViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: createTaskPreviewVC)
      }
      
      func settingsVC(_: Void = ()) -> SettingsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: settingsVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "Combined Shape 2") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Combined Shape 2' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "chat.icon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'chat.icon' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "appstore_icon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'appstore_icon' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "location_icon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'location_icon' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "back_icon_white") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'back_icon_white' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "greenMenuIcon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'greenMenuIcon' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "arrow_down_1") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'arrow_down_1' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "arrow_down_settings_icon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'arrow_down_settings_icon' is used in storyboard 'Settings', but couldn't be loaded.") }
        if _R.storyboard.settings().settingsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'settingsVC' could not be loaded from storyboard 'Settings' as 'SettingsViewController'.") }
        if _R.storyboard.settings().createTaskFirstStepVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'createTaskFirstStepVC' could not be loaded from storyboard 'Settings' as 'CreateTaskFirstStepViewController'.") }
        if _R.storyboard.settings().createTaskPreviewVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'createTaskPreviewVC' could not be loaded from storyboard 'Settings' as 'CreateTaskPreviewViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct signIn: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let loginNavVC = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "LoginNavVC")
      let name = "SignIn"
      let signInVC = StoryboardViewControllerResource<SignInViewController>(identifier: "SignInVC")
      
      func loginNavVC(_: Void = ()) -> UIKit.UINavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: loginNavVC)
      }
      
      func signInVC(_: Void = ()) -> SignInViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: signInVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "login_fon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'login_fon' is used in storyboard 'SignIn', but couldn't be loaded.") }
        if UIKit.UIImage(named: "fb_icon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'fb_icon' is used in storyboard 'SignIn', but couldn't be loaded.") }
        if UIKit.UIImage(named: "logo_white") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo_white' is used in storyboard 'SignIn', but couldn't be loaded.") }
        if UIKit.UIImage(named: "twitter_icon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'twitter_icon' is used in storyboard 'SignIn', but couldn't be loaded.") }
        if UIKit.UIImage(named: "qr_icone") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'qr_icone' is used in storyboard 'SignIn', but couldn't be loaded.") }
        if _R.storyboard.signIn().signInVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'signInVC' could not be loaded from storyboard 'SignIn' as 'SignInViewController'.") }
        if _R.storyboard.signIn().loginNavVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'loginNavVC' could not be loaded from storyboard 'SignIn' as 'UIKit.UINavigationController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct signUp: Rswift.StoryboardResourceType, Rswift.Validatable {
      let agreementVC = StoryboardViewControllerResource<UIKit.UIViewController>(identifier: "AgreementVC")
      let bundle = R.hostingBundle
      let name = "SignUp"
      let signUpVC = StoryboardViewControllerResource<SignUpViewController>(identifier: "SignUpVC")
      
      func agreementVC(_: Void = ()) -> UIKit.UIViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: agreementVC)
      }
      
      func signUpVC(_: Void = ()) -> SignUpViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: signUpVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "back_icon_white") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'back_icon_white' is used in storyboard 'SignUp', but couldn't be loaded.") }
        if UIKit.UIImage(named: "check.Icon.NoActive") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'check.Icon.NoActive' is used in storyboard 'SignUp', but couldn't be loaded.") }
        if UIKit.UIImage(named: "login_fon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'login_fon' is used in storyboard 'SignUp', but couldn't be loaded.") }
        if UIKit.UIImage(named: "logo_white") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo_white' is used in storyboard 'SignUp', but couldn't be loaded.") }
        if _R.storyboard.signUp().agreementVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'agreementVC' could not be loaded from storyboard 'SignUp' as 'UIKit.UIViewController'.") }
        if _R.storyboard.signUp().signUpVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'signUpVC' could not be loaded from storyboard 'SignUp' as 'SignUpViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct signUpStepTwo: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SignUpStepTwo"
      let signUpStepTwoVC = StoryboardViewControllerResource<SignUpStepTwoViewController>(identifier: "SignUpStepTwoVC")
      
      func signUpStepTwoVC(_: Void = ()) -> SignUpStepTwoViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: signUpStepTwoVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "back_icon_white") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'back_icon_white' is used in storyboard 'SignUpStepTwo', but couldn't be loaded.") }
        if UIKit.UIImage(named: "login_fon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'login_fon' is used in storyboard 'SignUpStepTwo', but couldn't be loaded.") }
        if UIKit.UIImage(named: "logo_white") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo_white' is used in storyboard 'SignUpStepTwo', but couldn't be loaded.") }
        if _R.storyboard.signUpStepTwo().signUpStepTwoVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'signUpStepTwoVC' could not be loaded from storyboard 'SignUpStepTwo' as 'SignUpStepTwoViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct task: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Task"
      let selfieVC = StoryboardViewControllerResource<SelfieViewController>(identifier: "SelfieVC")
      let taskDetailVC = StoryboardViewControllerResource<TaskDetailViewController>(identifier: "TaskDetailVC")
      
      func selfieVC(_: Void = ()) -> SelfieViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: selfieVC)
      }
      
      func taskDetailVC(_: Void = ()) -> TaskDetailViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: taskDetailVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "Combined Shape 2") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Combined Shape 2' is used in storyboard 'Task', but couldn't be loaded.") }
        if UIKit.UIImage(named: "back_icon_white") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'back_icon_white' is used in storyboard 'Task', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_star6") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_star6' is used in storyboard 'Task', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icons8-instagram_new") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icons8-instagram_new' is used in storyboard 'Task', but couldn't be loaded.") }
        if UIKit.UIImage(named: "trash_icon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'trash_icon' is used in storyboard 'Task', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Check.Icon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Check.Icon' is used in storyboard 'Task', but couldn't be loaded.") }
        if _R.storyboard.task().selfieVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'selfieVC' could not be loaded from storyboard 'Task' as 'SelfieViewController'.") }
        if _R.storyboard.task().taskDetailVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'taskDetailVC' could not be loaded from storyboard 'Task' as 'TaskDetailViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
